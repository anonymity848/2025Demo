{"version":3,"sources":["actions/index.js","reducers/index.js","utils.js","components/Welcome.js","components/AlgSelection.js","components/Introduction.js","components/PhaseOne.js","components/Question.js","components/Histogram.js","components/three.js","components/ConvexHull.js","components/Legend.js","components/PreferenceSpace.js","components/Visuals.js","components/Stats.js","components/PhaseTwo.js","components/Result.js","components/SPTree.js","components/HistogramForR.js","components/GEGraph.js","components/End.js","components/ResultGraph.js","components/CarWelcome.js","components/NBAWelcome.js","components/App.js","index.js","imgs/favorite.png","imgs/SelectCatAttr.png","imgs/MainTitleAll.png","imgs/TitleTree.png","imgs/TitleGraph.png","imgs/MainTitle.png","imgs/MainTitleBall.png"],"names":["setActiveComponent","component","type","setCandidates","candidates","setDataset","points","mask","attributes","toggleMask","attr","val","_defineProperty","prunePoints","indices","step","setLeftPoints","changeMode","mode","changeK","K","updateConvexHull","vertices","combineReducers","activeComponent","state","arguments","length","undefined","action","labels","_objectSpread","prunedPoints","map","idx","concat","_toConsumableArray","leftPoints","filter","indexOf","numLeftPoints","prev","selectedDataset","ds","scores","userName","name","userEmail","email","interactionResults","radius","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","loadCarDataset","_ref","_asyncToGenerator","_callee","pointsURL","response","text","cars","_context","fetch","trim","split","line","parts","strings","numbers","part","_x","apply","selectCandidates","ranges","maxPoints","low","high","point","j","isValid","selectCatonlyCandidates","seen","Set","tuple","tupleStr","JSON","stringify","has","add","array2Vector2D","array","vector","window","Module","VecVecDouble","arr","vec","VectorDouble","x","push_back","delete","vector2Array","size","get","dominates","p1","p2","smallerBetter","isSelected","at","getSkyline","dominated","m","index","console","log","sl","Array","pt","skyline","Welcome","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","_key","props","handleStart","includes","startCar","startNBA","handleChange","event","setState","target","changeSelectedDataset","_createClass","datasetChoose","React","createElement","className","colSpan","onChange","id","checked","htmlFor","style","maxWidth","alt","src","MainTitle","width","background","borderRadius","textAlign","padding","boxShadow","onClick","Component","connect","dispatch","handleSPTree","SPTree","handleGEGraph","GEGraph","Introduction","start","handleModeChange","fontSize","PhaseTwo","inputs","createRef","SIMPLEX","RANDOM","Question","choose","option","trs","pair","tds","toString","interRR","runner","stopInteraction","nextPair","Indicess","getRanking","Scores","getScore","setScore","showResult","VectorInt","_ref2","_slicedToArray","config","candidatesVec","AlgorithmRunner","_this2","ths","data-toggle","title","getNumQuestion","_ref3","interResults","Histogram","toggleShowMore","prevState","showMore","_onMouseLeave","hintValue","_onNearestX","data","height","FlexibleXYPlot","onMouseLeave","margin","left","right","top","bottom","XAxis","tickValues","tickFormat","ticks","fill","stroke","fontWeight","YAxis","ChartLabel","includeMargin","xPercent","yPercent","transform","textAnchor","VerticalBarSeries","color","onNearestX","animation","Hint","y","mappedData","num","THREE","require","SCALE","FACTOR","ConvexHull","drawGeometry","verPoints","vertex","scaled_vertex","_construct","Vector3","geometry","ConvexGeometry","material","MeshBasicMaterial","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","opacity","transparent","mesh","Mesh","geo","EdgesGeometry","mat","LineBasicMaterial","linewidth","wireframe","LineSegments","scene","addAxes","axes","AxesHelper","typeface","font","Font","Math","PI","sqrt","_mesh$position","_mesh$rotation","position","rotation","shape","generateShapes","ShapeBufferGeometry","side","DoubleSide","set","lines","_line$position","_line$rotation","_ref4","Geometry","Line","frameId","requestAnimationFrame","animate","cancelAnimationFrame","controls","update","renderer","render","camera","mount","clientWidth","clientHeight","Scene","PerspectiveCamera","up","OrbitControls","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","prevProps","remove","dispose","removeChild","ref","alignItems","display","backgroundColor","SlideItem","justifyContent","Legend","attrData","settings","dots","infinite","speed","slidesToShow","slidesToScroll","vertical","verticalSwiping","arrows","swipeToSlide","afterChange","changeStartingIndex","verticalAlign","slider","slickPrev","cursor","FontAwesomeIcon","icon","faAngleUp","Slider","assign","slickNext","faAngleDown","PreferenceSpace","updateContextHullVertices","convexHullVertices","vertext","vert","Visuals","Stats","toggleShowMorePrune","showMorePrune","toggleShowMoreLeft","showMoreLeft","prunedTrs","leftTrs","_this$state","classNames","table-fixed","minWidth","_ref5","restart","th","carLength","numOfQuestion","prevLeftPoints","targetLevel","TreeNode","node","nodes","_ref$level","level","childNodes","child","parentId","href","dfs","tree","path","currentLevel","children","_step2","_iterator2","_createForOfIteratorHelper","s","n","e","f","findQuestion","pair1","nodeIndex","pair2","addCarToTree","car","find","generateCarTree","_step3","_iterator3","treeToNodesData","nodesData","queue","currentId","_queue$shift","shift","_step4","_iterator4","removeChildWithName","nameToRemove","referenceName","namesFound","newChildren","choice","updatedTree","updateNodesData","updatePair","TLeftTuples","getAllPaths","currentPath","_step","paths","_iterator","allLeftTuples","indexes","_loop","_allLeftTuples","_i","join","foundIndex","findIndex","candidate","pruneIndexes","startAgain","restartedAgain","container","document","querySelector","scrollLeft","scrollWidth","rootNode","rootAttr","TitleTree","class","HistogramForR","dcat","dnum","toggleShowMoreGraph","showMoreGraph","toggleShowMoreRange","showMoreRange","socket","disconnect","emit","integer","generateRandomNumbers","random","sort","a","b","setUtilityVec","Vec","coff","resultU","sum","coord","numUtilityVec","regenerateUtilityVec","extVec","drawGraph","setRadius","nodeVec","upper","lower","relationVec","io","on","node_vectors","node_upperBound","node_lowerBound","relation_vectors","ext_vectors","raArry","findMaxDistance","toFixed","leftpoints","initialize","point1","point2","pow","maxDistance","distance","calculateDistance","max","normCandidate","matrix","maxValues","minValues","col","maxInCol","minInCol","row","findMaxMinOfColumns","normalized","int1","int2","int3","_this3","svg","d3","current","selectAll","center","upperForRec","lowerForRec","bound","bb","d","append","rectangleHeight","largeRectNodes","from","_","upshow","lwshow","angle","r","cos","sin","getCirclePosition","firstHalf","secondHalf","largeNodeWidth","largeNodeHeight","label1","label2","lw","getLineEndpoints","node1","node2","x1","y1","x2","y2","relation","showLabel","show","textElement","relationVecTP","largeRects","largeRect","rel","flat","select","getBBox","_this4","vecForTable","vvvvv","ele","TitleGraph","overflow","fontFamily","border","End","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","_isNativeReflectConstruct","Super","_getPrototypeOf","NewTarget","_possibleConstructorReturn","CarWelcome","_this$props$attribute","_this$props$attribute2","range","str","alert","parseFloat","test","parseInt","startAlgorithmGEGraph","startAlgorithmSPTree","selectedAlgorithm","_ref6","_ref7","_ref8","isCatAble","abled","isNumAble","points1","_componentDidMount","_ref9","_ref11","_ref12","_ref13","_ref14","categoricalValues","catAttrs","textDecoration","numAttrs","_ref15","_ref16","placeholder","disabled","numTuple","algorithmChoose","_ref17","NBAWelcome","AlgSelction","ResultGEGraph","Result","onRuntimeInitialized","_onRuntimeInitialized","store","createStore","rootReducer","Provider","App","getElementById","script","body","module","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8dedebaf.chunk.js","sourcesContent":["export const SET_ACTIVE_COMPONENT = \"SET_ACTIVE_COMPONENT\";\r\nexport const SET_CANDIDATES = \"SET_CANDIDATES\";\r\nexport const SET_DATASET = \"SET_DATASET\";\r\nexport const TOGGLE_MASK = \"TOGGLE_MASK\";\r\nexport const PRUNE_POINTS = \"PRUNE_POINTS\";\r\nexport const SET_LEFT_POINTS = \"SET_LEFT_POINTS\";\r\nexport const SET_MODE = \"SET_MODE\";\r\nexport const RESTART = \"RESTART\";\r\nexport const UPDATE_CONVEX_HULL = \"UPDATE_CONVEX_HULL\";\r\nexport const SET_SCORE = \"SET_SCORE\";\r\nexport const SET_NAME = \"SET_NAME\";\r\nexport const SET_EMAIL = \"SET_EMAIL\";\r\nexport const SET_INTERACTION_RESULT = \"SET_INTERACTION_RESULT\";\r\nexport const RENAME_NODE = \"RENAME_NODE\";\r\nexport const SET_K = \"SET_K\";\r\nexport const SET_RADIUS = \"SET_RADIUS\"\r\nexport const SET_SELECTEDDATASET = \"SET_SELECTEDDATASET\"\r\n\r\nexport const SET_LABEL = \"SET_LABEL\"\r\n\r\nexport const setRadius = radius => ({\r\n  type: SET_RADIUS,\r\n  radius\r\n});\r\n\r\nexport const setRenameNode = renameNode => ({\r\n  type: RENAME_NODE,\r\n  renameNode\r\n});\r\n\r\nexport const setInteractionResult = interactionResults => ({\r\n  type: SET_INTERACTION_RESULT,\r\n  interactionResults\r\n});\r\n\r\nexport const setUserName = name => ({\r\n  type: SET_NAME,\r\n  name\r\n});\r\n\r\nexport const setUserEmail = email => ({\r\n  type: SET_EMAIL,\r\n  email\r\n});\r\n\r\nexport const setActiveComponent = component => ({\r\n  type: SET_ACTIVE_COMPONENT,\r\n  component\r\n});\r\n\r\nexport const setCandidates = candidates => ({\r\n  type: SET_CANDIDATES,\r\n  candidates\r\n});\r\n\r\nexport const setDataset = (points, mask, attributes) => ({\r\n  type: SET_DATASET,\r\n  points,\r\n  mask,\r\n  attributes\r\n});\r\n\r\nexport const toggleMask = (attr, val) => ({\r\n  type: TOGGLE_MASK,\r\n  mask: { [attr]: val }\r\n});\r\n\r\nexport const prunePoints = (indices, step) => ({\r\n  type: PRUNE_POINTS,\r\n  indices,\r\n  step\r\n});\r\n\r\nexport const setLeftPoints = indices => ({\r\n  type: SET_LEFT_POINTS,\r\n  indices\r\n});\r\n\r\nexport const setScore = scores => ({\r\n  type: SET_SCORE,\r\n  scores\r\n})\r\n\r\nexport const changeMode = mode => ({\r\n  type: SET_MODE,\r\n  mode\r\n});\r\n\r\nexport const changeK = K => ({\r\n  type: SET_K,\r\n  K\r\n});\r\n\r\nexport const changeSelectedDataset = ds => ({\r\n  type: SET_SELECTEDDATASET,\r\n  ds\r\n});\r\n\r\nexport const restart = () => ({\r\n  type: RESTART\r\n});\r\n\r\nexport const updateConvexHull = vertices => ({\r\n  type: UPDATE_CONVEX_HULL,\r\n  vertices\r\n});\r\n","import { combineReducers } from \"redux\";\r\nimport {\r\n  SET_ACTIVE_COMPONENT,\r\n  SET_DATASET,\r\n  SET_CANDIDATES,\r\n  TOGGLE_MASK,\r\n  SET_LEFT_POINTS,\r\n  PRUNE_POINTS,\r\n  SET_MODE,\r\n  RESTART,\r\n  UPDATE_CONVEX_HULL,\r\n  SET_SCORE,\r\n  SET_NAME,\r\n  SET_EMAIL,\r\n  SET_INTERACTION_RESULT,\r\n  SET_RADIUS,\r\n  SET_SELECTEDDATASET,\r\n  SET_LABEL\r\n} from \"../actions\";\r\n\r\n\r\nconst radius = (state = [], action) => {\r\n  switch (action.type) {\r\n    case RESTART:\r\n      return [];\r\n    case SET_RADIUS:\r\n        return action.radius;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst activeComponent = (state = \"Welcome\", action) => {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_COMPONENT:\r\n      return action.component;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// all points in the dataset\r\nconst points = (state = null, action) => {\r\n  switch (action.type) {\r\n    case SET_DATASET:\r\n      return action.points;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//the scores of all points in the dataset\r\nconst scores = (state = null, action) => {\r\n  switch (action.type) {\r\n    case SET_SCORE:\r\n      return action.scores;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\n// the labels of points\r\nconst labels = (state = null, action) => {\r\n  switch (action.type) {\r\n    case SET_LABEL:\r\n      return action.labels;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// the attribute names\r\nconst attributes = (state = null, action) => {\r\n  switch (action.type) {\r\n    case SET_DATASET:\r\n      return action.attributes;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// the set of points in the specified ranges.\r\nconst candidates = (state = null, action) => {\r\n  switch (action.type) {\r\n    case SET_CANDIDATES:\r\n      return action.candidates;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// show/hide attributes (this feature is not exposed in the UI)\r\nconst mask = (state = null, action) => {\r\n  switch (action.type) {\r\n    case SET_DATASET:\r\n      return { ...action.mask };\r\n    case TOGGLE_MASK:\r\n      return { ...state, ...action.mask };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// the set of points pruned.\r\n// it is an array of [idx, step no.]\r\nconst prunedPoints = (state = [], action) => {\r\n  switch (action.type) {\r\n    case RESTART:\r\n      return [];\r\n    case PRUNE_POINTS:\r\n      const points = action.indices.map(idx => [idx, action.step]);\r\n      return [...points, ...state];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// the set of candidate points\r\n// it is an array of indices\r\nconst leftPoints = (state = [], action) => {\r\n  switch (action.type) {\r\n    case RESTART:\r\n      return [];\r\n    case SET_LEFT_POINTS:\r\n      return action.indices;\r\n    case PRUNE_POINTS:\r\n      return state.filter(idx => action.indices.indexOf(idx) === -1);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// history of the number of left points\r\nconst numLeftPoints = (state = [], action) => {\r\n  switch (action.type) {\r\n    case SET_LEFT_POINTS:\r\n      return [action.indices.length];\r\n    case PRUNE_POINTS:\r\n      const prev = state[state.length - 1];\r\n      return [...state, prev - action.indices.length];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// the algorithm to select a pair of points.\r\nconst mode = (state = \"sptree\", action) => {\r\n  switch (action.type) {\r\n    case SET_MODE:\r\n      return action.mode;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\n// the algorithm to select a pair of points.\r\nconst selectedDataset = (state = \"car\", action) => {\r\n  switch (action.type) {\r\n    case SET_SELECTEDDATASET:\r\n      return action.ds;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\n// vertices of the convex hull of the preference space.\r\nconst vertices = (state = [], action) => {\r\n  switch (action.type) {\r\n    case UPDATE_CONVEX_HULL:\r\n      return action.vertices;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst userName = (state = null, action) => {\r\n  switch (action.type) {\r\n    case SET_NAME:\r\n      return action.name;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst userEmail = (state = null, action) => {\r\n  switch (action.type) {\r\n    case SET_EMAIL:\r\n      return action.email;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst interactionResults = (state = null, action) => {\r\n  switch (action.type) {\r\n    case SET_INTERACTION_RESULT:\r\n      return action.interactionResults;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport default combineReducers({\r\n  activeComponent,\r\n  points,\r\n  labels,\r\n  attributes,\r\n  candidates,\r\n  mask,\r\n  prunedPoints,\r\n  leftPoints,\r\n  numLeftPoints,\r\n  mode,\r\n  selectedDataset,\r\n  vertices,\r\n  scores,\r\n  userName,\r\n  userEmail,\r\n  interactionResults,\r\n  radius\r\n});\r\n","// read points from a text file\nfunction parsePoints(text) {\n  const points = text\n    .trim()\n    .split(\"\\n\")\n    .slice(1) // the first line is <numOfPoints> <dimension>\n    .map(line =>\n      line\n        .trim()\n        .split(/\\s+/)\n        .map(str => parseFloat(str))\n    );\n  return points; //obtain a 2D array\n}\n\n// read labels from a text file\nfunction parseLabels(text) {\n  const labels = text.trim().split(\"\\n\");\n  return labels;\n}\n\n// check if val is in the range [low, high].\nfunction isInRange(val, low, high) {\n  return low <= val && val <= high;\n}\n\n// get the range of each attribute in a set of points.\nexport const getRanges = points => {\n  const ranges = points[0].map(x => ({ low: x, high: x }));\n  points.slice(1).forEach(point => {\n    point.forEach((x, i) => {\n      ranges[i].low = Math.min(ranges[i].low, x);\n      ranges[i].high = Math.max(ranges[i].high, x);\n    });\n  });\n  return ranges; //obtain an array of objects\n};\n\n// load a dataset by reading its points and labels.\nexport const loadCarDataset = async (pointsURL) => {\n  let response = await fetch(pointsURL);\n  let text = await response.text();\n  const cars = text\n      .trim()\n      .split(\"\\n\")\n      .map(line => {\n        const parts = line.trim().split(/\\s+/);\n        const strings = parts.slice(0, 3);  // the first three\n        const numbers = parts.slice(3).map(part => +part); // the rest\n        return [...strings, ...numbers];\n      });\n  return cars;\n};\n\n\n// load a dataset by reading its categorical attributes\nexport const loadDataset = async (pointsURL, labelsURL) => {\n  let response = await fetch(pointsURL);\n  const points = parsePoints(await response.text());\n  if (labelsURL === undefined) {\n    return points;\n  }\n  response = await fetch(labelsURL);\n  const labels = parseLabels(await response.text());\n  return [points, labels];\n};\n\n// get points that are in the specified ranges.\nexport const selectCandidates = (points, ranges, mask, maxPoints) => {\n  const candidates = [];\n  for (let i = 0; i < points.length; ++i)\n  {\n    if (candidates.length >= maxPoints) break;\n    const point = [];\n    //categorical\n    for (let j = 0; j < 3; ++j)\n    {\n      if (mask[j])\n        point.push(points[i][j]);\n    }\n    //numerical\n    let isValid = true;\n    for (let j = 3; j < points[0].length; ++j)\n    {\n      if (mask[j] && !isInRange(points[i][j], ranges[j - 3][0], ranges[j - 3][1])) {\n        isValid = false;\n        break;\n      }\n      else if(mask[j])\n        point.push(points[i][j]);\n    }\n\n    if (isValid) {\n      candidates.push(point);\n    }\n  }\n  return candidates\n};\n\nfunction findMaxMinOfColumns(matrix) {\n  let maxValues = [];\n  let minValues = [];\n\n  if (matrix.length === 0) return [minValues, maxValues];\n\n  for (let col = 0; col < matrix[0].length; col++)\n  {\n    let maxInCol = matrix[0][col];\n    let minInCol = matrix[0][col];\n\n    for (let row = 1; row < matrix.length; row++)\n    {\n        if (matrix[row][col] > maxInCol) {\n          maxInCol = matrix[row][col];\n        }\n        if (matrix[row][col] < minInCol) {\n          minInCol = matrix[row][col];\n        }\n    }\n\n    maxValues.push(maxInCol);\n    minValues.push(minInCol);\n  }\n\n  return [minValues, maxValues];\n}\n\nexport const normalized = (points, smallerBetter) => {\n  const values = findMaxMinOfColumns(points);\n  console.log(values);\n  const candidates = [];\n  for (let i = 0; i < points.length; ++i)\n  {\n    const point = [];\n    //categorical\n    for (let j = 0; j < points[0].length - smallerBetter.length; ++j)\n        point.push(points[i][j]);\n    //numerical\n    for (let j = points[0].length - smallerBetter.length; j < points[0].length; ++j)\n    {\n        if(smallerBetter)\n          point.push(1 - (points[i][j] - values[0][j]) / (values[1][j] - values[0][j]));\n        else\n          point.push((points[i][j] - values[0][j]) / (values[1][j] - values[0][j]));\n    }\n      candidates.push(point);\n  }\n  return candidates\n};\n\n\n// get points that are in the specified ranges.\nexport const selectCatonlyCandidates = (points, mask) => {\n  const candidates = [];\n  const seen = new Set();\n\n  for (let i = 0; i < points.length; ++i)\n  {\n    const tuple = [];\n    for (let j = 0; j < 3; ++j)\n      if (mask[j]) tuple.push(points[i][j]);\n\n    const tupleStr = JSON.stringify(tuple); // 将数组转换为字符串\n    if (!seen.has(tupleStr)) { // 如果这是一个新的子数组\n      candidates.push(tuple);\n      seen.add(tupleStr); // 添加到已见过的集合中\n    }\n  }\n  return candidates;\n};\n\n\n// convert a JS array to a C++ 2D vector\nexport const array2Vector2D = array => {\n  const vector = new window.Module.VecVecDouble();\n  array.forEach(arr => {\n    const vec = new window.Module.VectorDouble();\n    arr.forEach(x => vec.push_back(x));\n    vector.push_back(vec);\n    vec.delete();\n  });\n  return vector;\n};\n\n// convert a C++ 2D vector to a JS array\nexport const vector2Array2D = vector => {\n  const array = [];\n  for (let i = 0; i < vector.size(); ++i) {\n    const vec = vector.get(i);\n    const arr = [];\n    for (let j = 0; j < vec.size(); ++j) arr.push(vec.get(j));\n    array.push(arr);\n  }\n  return array;\n};\n\n// convert a C++ vector to a JS array\nexport const vector2Array = vector => {\n  const array = [];\n  for (let i = 0; i < vector.size(); ++i) {\n    array.push(vector.get(i));\n  }\n  return array;\n};\n\n// get the indices of points pruned.\n// both prevIndices and currIndices need to be sorted.\nexport const getPrunedIndices = (prevIndices, currIndices) => {\n  let prunedIndices = [];\n  for (let i = 0, j = 0; i < prevIndices.size() || j < currIndices.size(); ) {\n    if (j >= currIndices.size() || prevIndices.get(i) < currIndices.get(j)) {\n      prunedIndices.push(prevIndices.get(i));\n      ++i;\n    } else {\n      ++i;\n      ++j;\n    }\n  }\n  return prunedIndices;\n};\n\n\nconst dominates = (p1, p2, smallerBetter, isSelected) => {\n  //categorical\n  for (let i = 0; i < 3; i++)\n  {\n      if(p1[i] !== p2[i])\n        return 0;\n  }\n\n  //numerical\n  for (let i = 3; i < p1.length; i++)\n  {\n    if (isSelected.at(i) === 1)\n    {\n      if (smallerBetter[i] === 1) {\n        if (p1[i] > p2[i]) return 0;\n      } else {\n        if (p1[i] < p2[i]) return 0;\n      }\n    }\n  }\n  return 1;\n}\n\n\nexport const getSkyline = (points, smallerBetter, isSelected) => {\n  let i, j, dominated, index = 0, m;\n  console.log(smallerBetter, isSelected);\n  let sl = new Array(points.length);\n  for (i = 0; i < points.length; i++)\n  {\n\n    dominated = 0;\n    const pt = points.at(i).slice();\n\n    for (j = 0; j < index && !dominated; ++j) {\n      if (dominates(points[sl[j]], pt, smallerBetter, isSelected))\n        dominated = 1;\n    }\n\n    if (!dominated)\n    {\n      m = index;\n      index = 0;\n      for (j = 0; j < m; j++) {\n        if (!dominates(pt, points[sl[j]], smallerBetter, isSelected)) {\n          sl[index++] = sl[j];\n        }\n      }\n      sl[index++] = i;\n    }\n  }\n\n  console.log(sl);\n\n  let skyline = [];\n  for(let i = 0; i < index; ++i)\n    skyline.push(points[sl[i]]);\n\n  return skyline;\n}","import React from \"react\";\nimport {\n  setActiveComponent,\n  changeSelectedDataset,\n} from \"../actions\";\nimport { connect } from \"react-redux\";\nimport { selectCandidates, selectCatonlyCandidates, getRanges, getSkyline } from \"../utils\";\nimport imgFavorite from '../imgs/favorite.png';\nimport MainTitle from '../imgs/MainTitleAll.png';\nimport SelectCatAttr from '../imgs/SelectCatAttr.png'\nimport '../css/welcome.css';\nimport {config} from \"@fortawesome/fontawesome-svg-core\";\n\n// the welcome scene containing a brief introduction and a table to obtain the user's input\nclass Welcome extends React.Component {\n  state = {\n    selectedDataset: this.props.selectedDataset\n  }\n\n  handleStart = () => {\n    if(['car'].includes(this.props.selectedDataset))\n    {\n      this.props.startCar();\n    }\n    else\n    {\n      this.props.startNBA();\n    }\n  };\n\n  handleChange = event => {\n    this.setState({ selectedDataset: event.target.value });\n    this.props.changeSelectedDataset(event.target.value);\n  };\n\n  render() {\n    const datasetChoose = [];\n      datasetChoose.push(\n      <tr>\n      <td className=\"align-middle\" colSpan=\"2\">\n        <div className=\"form-check form-check-inline custom-radio-spacing\">\n          <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"dataset\"\n              value=\"car\"\n              onChange={this.handleChange}\n              id=\"carRadio\"\n              checked={this.state.selectedDataset === 'car'}\n          />\n          <label className=\"form-check-label\" htmlFor=\"carRadio\">\n            Car Dataset\n          </label>\n        </div>\n        <div className=\"form-check form-check-inline\">\n          <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"dataset\"\n              value=\"nba\"\n              onChange={this.handleChange}\n              id=\"nbaRadio\"\n              checked={this.state.selectedDataset === 'nba'}\n          />\n          <label className=\"form-check-label\" htmlFor=\"nbaRadio\">\n            NBA Dataset\n          </label>\n        </div>\n      </td>\n    </tr>\n    );\n\n\n    return (\n        <div className=\"text-center m-auto\" style={{ maxWidth: \"100%\" }}>\n          <img alt='' src={MainTitle} style={{ 'width': '100%' }} />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          {/* Dataset */}\n          <h4 style={{\n            'background': 'linear-gradient(to right, #89bfe9, #5271a6)', // 添加从左到右的颜色渐变\n            'borderRadius': '5px',\n            'textAlign': 'left',\n            'padding': '5px',\n            'boxShadow': '3px 3px 5px rgba(0, 0, 0, 0.5)'  // 添加稍微的阴影效果\n          }}>\n            Please select the Dataset for Recommendation\n          </h4>\n          <table className=\"table\">\n            <tbody>{datasetChoose}</tbody>\n          </table>\n          <br />\n          <br />\n          <br />\n          <br />\n          <div>\n            <button\n                type=\"button\"\n                className=\"modern-btn\"\n                style={{ width: \"8rem\" }}\n                onClick={this.handleStart}\n            >\n              Next\n            </button>\n          </div>\n          <br/>\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({selectedDataset}) => ({\n    selectedDataset\n});\n\nconst mapDispatchToProps = dispatch => ({\n  startCar: () => {\n    dispatch(setActiveComponent(\"CarWelcome\"));\n  },\n  startNBA: () => {\n    dispatch(setActiveComponent(\"NBAWelcome\"));\n  },\n  changeSelectedDataset: ds => dispatch(changeSelectedDataset(ds))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Welcome);","import React from \"react\";\r\nimport {\r\n  setActiveComponent,\r\n  setCandidates,\r\n  toggleMask,\r\n  changeMode,\r\n  setUserName,\r\n  setUserEmail\r\n} from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { selectCandidates } from \"../utils\";\r\n\r\n\r\n\r\n// the welcome scene containing a brief introduction and a table to obtain the user's input\r\nclass Welcome extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  handleSPTree = () => {\r\n      this.props.SPTree();\r\n  };\r\n\r\n  handleGEGraph = () => {\r\n    this.props.GEGraph();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"text-center m-auto\" style={{ maxWidth: \"55rem\" }}>\r\n        <h1>You will be asked a few questions that can help us to learn your preference. Then, \r\n        a car will be recommended to you.</h1> \r\n        <br />\r\n        <p className=\"lead text-muted\">\r\n          Please select one algorithm for your car recommendation.</p>\r\n        <br />\r\n        <br />\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            style={{ width: \"18rem\" }}\r\n            onClick={this.handleSPTree}\r\n          >\r\n           Algorithm SP-Tree\r\n          </button>\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            style={{ width: \"18rem\" }}\r\n            onClick={this.handleGEGraph}\r\n          >\r\n           Algorithm GE-Graph\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ attributes, mask, points, mode }) => ({\r\n  attributes,\r\n  mask,\r\n  points,\r\n  mode\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  SPTree: () => dispatch(setActiveComponent(\"SPTree\")),\r\n  GEGraph: () => dispatch(setActiveComponent(\"GEGraph\"))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Welcome);\r\n","import React from \"react\";\r\nimport {\r\n  setActiveComponent,\r\n  setCandidates,\r\n  toggleMask,\r\n  changeMode\r\n} from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { selectCandidates } from \"../utils\";\r\n\r\n\r\n\r\n// the welcome scene containing a brief introduction and a table to obtain the user's input\r\nclass Introduction extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  handleStart = () => {\r\n    this.props.start();\r\n  };\r\n\r\n  handleModeChange = event => {\r\n    this.props.changeMode(event.target.value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"text-center m-auto\" style={{ maxWidth: \"50rem\" }}>\r\n        <h1>Instructions</h1>\r\n        <br />\r\n        <br />\r\n        <p className=\"lead text-left\" style={{fontSize: \"30px\"}}>\r\n          There are two phases: Interaction and Evaluation. <br />\r\n        </p>\r\n        <p className=\"lead text-left\">\r\n          Phase 1 (Interaction): In the Interaction phase, we want to ask you a few questions to learn\r\n          your preference and then find some cars that you will be interested in. <br /><br />\r\n          Phase 2 (Evaluation): In the Evaluation phase, we will present you some cars and ask you\r\n          whether you are interested in them.<br /><br />\r\n        </p>\r\n        <p className=\"lead text-muted\">\r\n          Click the \"Start\" button to start the research project. <br />\r\n        </p>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            style={{ width: \"8rem\" }}\r\n            onClick={this.handleStart}\r\n          >\r\n            Start\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ attributes, mask, points, mode }) => ({\r\n  attributes,\r\n  mask,\r\n  points,\r\n  mode\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    start: () => {\r\n        dispatch(setActiveComponent(\"PhaseOne\"));\r\n    },\r\n    toggleMask: (attr, mask) => dispatch(toggleMask(attr, mask)),\r\n    changeMode: mode => dispatch(changeMode(mode))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Introduction);\r\n","import React from \"react\";\r\nimport {\r\n    setActiveComponent,\r\n    setCandidates,\r\n    toggleMask,\r\n    changeMode\r\n} from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { selectCandidates } from \"../utils\";\r\n\r\n\r\n\r\n// the welcome scene containing a brief introduction and a table to obtain the user's input\r\nclass PhaseTwo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputs = {};\r\n        this.inputs.name = React.createRef();\r\n        this.inputs.email = React.createRef();\r\n    }\r\n\r\n    handleStart = () => {\r\n        this.props.start();\r\n    };\r\n\r\n    handleModeChange = event => {\r\n        this.props.changeMode(event.target.value);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-center m-auto\" style={{ maxWidth: \"40rem\" }}>\r\n                <h1>Phase Two: Evaluation</h1>\r\n                <br />\r\n                <br />\r\n                <h4 >\r\n                    You just ended phase one. We are now going to phase two Evaluation. We will present you some cars and ask you\r\n                    whether you are interested in them. <br />\r\n                </h4>\r\n                <br />\r\n                <p className=\"lead text-muted\">\r\n                    Click the \"Continue\" button to continue. <br />\r\n                </p>\r\n                <div>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary\"\r\n                        style={{ width: \"8rem\" }}\r\n                        onClick={this.handleStart}\r\n                    >\r\n                        Continue\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ attributes, mask, points, mode }) => ({\r\n    attributes,\r\n    mask,\r\n    points,\r\n    mode\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    start: () => {\r\n        dispatch(setActiveComponent(\"Result\"));\r\n    },\r\n    toggleMask: (attr, mask) => dispatch(toggleMask(attr, mask)),\r\n    changeMode: mode => dispatch(changeMode(mode))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(PhaseTwo);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setActiveComponent,\r\n  setInteractionResult,\r\n  setLeftPoints,\r\n  setScore,\r\n  prunePoints,\r\n  updateConvexHull\r\n} from \"../actions\";\r\nimport {\r\n  array2Vector2D,\r\n  vector2Array,\r\n  getPrunedIndices,\r\n  vector2Array2D\r\n} from \"../utils\";\r\n\r\nconst SIMPLEX = 2;\r\nconst RANDOM = 1;\r\n\r\n// iteratively ask the user to choose the preferred car from a pair of cars.\r\nclass Question extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const smallerBetter = new window.Module.VectorInt();\r\n    this.attributes = [];\r\n    this.props.attributes.forEach(([attr, config]) => {\r\n      if (this.props.mask[attr]) {\r\n        smallerBetter.push_back(config.smallerBetter ? 1 : 0);\r\n        this.attributes.push(attr);\r\n      }\r\n    });\r\n    const candidatesVec = array2Vector2D(this.props.candidates);\r\n    this.runner = new window.Module.AlgorithmRunner(\r\n      candidatesVec,\r\n      smallerBetter,\r\n      this.props.mode === \"random\" ? RANDOM : SIMPLEX\r\n    );\r\n    candidatesVec.delete();\r\n    const indices = this.runner.nextPair();\r\n    this.state = {\r\n        pair: vector2Array(indices),\r\n        interRR: []\r\n    };\r\n  }\r\n\r\n  choose = idx => {\r\n    const option = idx + 1;\r\n    //record the interaction result\r\n    const trs = this.state.pair.map((idx, i) => {\r\n      let tds = \"\\n\";\r\n      this.props.candidates[idx].forEach((x, j) => {\r\n        tds += x.toString();\r\n        tds += \"  \";\r\n      });\r\n      return tds;\r\n    });\r\n    trs.push(\"\\n\");\r\n    trs.push(option);\r\n    trs.push(\"\\n\");\r\n    console.log(trs);\r\n    this.state.interRR.push(trs);\r\n\r\n    const accurracy = this.runner.choose(option);\r\n    if (accurracy > 0.99999)\r\n    {\r\n      this.stopInteraction();\r\n    }\r\n    else {\r\n      const indices = this.runner.nextPair();\r\n      this.setState({\r\n        pair: vector2Array(indices)\r\n      });\r\n    }\r\n  };\r\n\r\n  stopInteraction = () => {\r\n    //this.prevIndices.delete();\r\n    const Indicess = this.runner.getRanking();\r\n    this.props.setLeftPoints(vector2Array(Indicess));\r\n    const Scores = this.runner.getScore();\r\n    this.props.setScore(vector2Array(Scores));\r\n    this.runner.delete();\r\n    this.props.showResult(this.state.interRR);\r\n};\r\n\r\nrender() {\r\nconst ths = [<th key=\"Option No.\">Option</th>];\r\nthis.attributes.forEach(attr => {\r\n  ths.push(<th key={attr}>{attr}</th>);\r\n});\r\nths.push(<th key=\"chooseButton\" />);\r\n\r\nconst trs = this.state.pair.map((idx, i) => {\r\n  const tds = [<td key=\"Option No.\">{i + 1}</td>];\r\n  this.props.candidates[idx].forEach((x, j) => {\r\n    tds.push(<td key={j}>{x}</td>);\r\n  });\r\n  tds.push(\r\n    <td key=\"chooseButton\">\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-outline-success btn-sm\"\r\n        onClick={() => this.choose(i)}\r\n      >\r\n        Choose\r\n      </button>\r\n    </td>\r\n  );\r\n  return (\r\n    <tr key={i} data-toggle=\"tooltip\" title={this.props.labels[idx]}>\r\n      {tds}\r\n    </tr>\r\n  );\r\n});\r\n\r\nreturn (\r\n  <div>\r\n    <h3>Phase One: Interaction  </h3>\r\n    <br/><br/>\r\n    <h4>\r\n      Q{this.runner.getNumQuestion()}: Choose the Car you favor more\r\n      between the following options\r\n    </h4>\r\n    <div className=\"row justify-content-center align-items-center\">\r\n      <div className=\"col-md-8\">\r\n        <table className=\"table table-hover text-center\">\r\n          <thead>\r\n            <tr>{ths}</tr>\r\n          </thead>\r\n          <tbody>{trs}</tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n}\r\n}\r\n\r\nconst mapStateToProps = ({ labels, candidates, mask, attributes, numLeftPoints, mode, scores }) => ({\r\n    labels,\r\n    candidates,\r\n    mask,\r\n    attributes,\r\n    numLeftPoints,\r\n    mode,\r\n    scores\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  showResult: (interResults) => {\r\n    dispatch(setInteractionResult(interResults));\r\n    dispatch(setActiveComponent(\"PhaseTwo\"));\r\n  },\r\n  setLeftPoints: indices => { dispatch(setLeftPoints(indices));},\r\n  setScore: scores => { dispatch(setScore(scores));},\r\n  prunePoints: (indices, step) => { dispatch(prunePoints(indices, step));},\r\n  updateConvexHull: vertices => {dispatch(updateConvexHull(vertices)); }\r\n});\r\n\r\nexport default connect(\r\nmapStateToProps,\r\nmapDispatchToProps\r\n)(Question);\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  FlexibleXYPlot,\n  XAxis,\n  YAxis,\n  Hint,\n  VerticalBarSeries,\n  ChartLabel\n} from \"react-vis\";\nimport \"../css/textStyle.css\"\n\n\n// a histogram to show the number of cars left vs the number of questions asked.\nclass Histogram extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hintValue: null,\n      showMore: false\n    };\n  }\n\n  toggleShowMore = () => {\n    this.setState(prevState => ({\n      showMore: !prevState.showMore\n    }));\n  };\n\n  _onMouseLeave = () => {\n    this.setState({\n      hintValue: null\n    });\n  };\n\n  _onNearestX = (value, { index }) => {\n    this.setState({\n      hintValue: this.props.data[index]\n    });\n  };\n\n  render() {\n    const { showMore } = this.state;\n    const moreText = \" During the interaction, according to your answers \" +\n        \"to questions, we can learn your preference on tuples. Then, unsuitable tuples are excluded from \" +\n        \"Candidates Tuples based on the learned preference. Thus, with more questions you answer, fewer Candidates Tuples left.\";\n\n    return (\n      <div>\n        <div style={{ width: \"30rem\", height: \"26rem\"}}>\n          <FlexibleXYPlot onMouseLeave={this._onMouseLeave}\n                          style={{ background: '#333' }}\n                          margin={{ left: 75, right: 20, top: 20, bottom: 60 }}>\n            <XAxis\n              tickValues={this.props.data.map((val, idx) => idx)}\n              tickFormat={value => value.toString()}\n              style={{\n                ticks: { fill: \"white\" },\n                text: { stroke: 'none', fill: 'white', fontWeight: 600, fontSize: '14px'}\n              }}\n            />\n            <YAxis\n              style={{\n                ticks: { fill: \"white\" },\n                text: { stroke: 'none', fill: 'white', fontWeight: 600, fontSize: '14px' }\n              }}\n            />\n            <ChartLabel\n              text=\"Number of Questions Answered\"\n              includeMargin={false}\n              xPercent={0.2}\n              yPercent={1.2}\n              style={{\n                style: { fill: \"white\", fontSize: '14px' }\n              }}\n            />\n            <ChartLabel\n              text=\"Number of Candidate Cars\"\n              includeMargin={false}\n              xPercent={-0.13}\n              yPercent={0.3}\n              style={{\n                transform: \"rotate(-90)\",\n                textAnchor: \"end\",\n                style: { fill: \"white\", fontSize: '14px' }\n              }}\n            />\n            <VerticalBarSeries\n              color=\"rgb(77, 182, 172)\"\n              onNearestX={this._onNearestX}\n              data={this.props.data}\n              animation\n              style={{\n                boxShadow: '2px 2px 4px rgba(0,0,0,0.5)', borderRadius: '5px 5px 0 0'\n              }}\n            />\n            {this.state.hintValue && (\n                <Hint value={this.state.hintValue}>\n                  <div style={{ background: 'rgba(0, 0, 0, 0.8)', padding: '5px', borderRadius: '5px', color: 'white' }}> {/* 添加背景，圆角和阴影 */}\n                    Number of Questions Answered: {this.state.hintValue.x}\n                    <br />\n                    Number of Candidate Tuples: {this.state.hintValue.y}\n                  </div>\n                </Hint>\n            )}\n          </FlexibleXYPlot>\n        </div>\n        <div style={{ width: \"30rem\" }}>\n          <h4 style={{'padding': '10px'}}>Figure: Candidate Tuples -- Questions</h4>\n          <p className=\"text-t-align\">\n            &nbsp;&nbsp;&nbsp;&nbsp;This figure shows the number of Candidates Tuples with the\n            number of Questions you answer. {showMore ? moreText : ' '}\n            <button className=\"toggleButton\" onClick={this.toggleShowMore}>\n              {showMore ? <span className=\"foldText\">&nbsp;fold</span> : <span className=\"foldText\">...unfold</span>}\n            </button>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\n/*\nconst mapStateToProps = ({ numLeftPoints }) => ({\n  data: numLeftPoints.map((num, i) => ({ x: i, y: num }))\n});\n\n */\nconst mapStateToProps = ({ numLeftPoints }) => {\n  let mappedData = numLeftPoints.map((num, i) => ({ x: i, y: num }));\n\n  if (mappedData.length === 1) {\n    mappedData.push({ x: 0.01, y: 0 });\n    mappedData.push({ x: -0.01, y: 0 });\n  }\n\n  return {\n    data: mappedData\n  };\n};\n\nexport default connect(mapStateToProps)(Histogram);\n","import * as THREE from \"three\";\nwindow.THREE = THREE;\nrequire(\"three/examples/js/controls/OrbitControls\");\nrequire(\"three/examples/js/QuickHull\");\nrequire(\"three/examples/js/geometries/ConvexGeometry\");\n\nexport default THREE;\n","import React from \"react\";\nimport THREE from \"./three\";\n\nconst SCALE = 100;\nconst FACTOR = 10; // font size = SCALE / FACTOR\n\n// the convex hull of the preference space\nclass ConvexHull extends React.Component {\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n\n    this.scene = new THREE.Scene();\n\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n\n    this.camera.position.set(1.5 * SCALE, 1.5 * SCALE, 0.5 * SCALE);\n\n    this.camera.up.set(0, 0, 1);\n    this.controls = new THREE.OrbitControls(this.camera, this.mount);\n    this.controls.update();\n\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setClearColor(0xffffff);\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n    this.addAxes();\n    this.drawGeometry();\n    this.start();\n  }\n\n  drawGeometry = () => {\n    if (this.props.vertices.length < 3) return;\n    let verPoints = this.props.vertices;\n    if (this.props.vertices.length < 4)\n      verPoints = [...verPoints, verPoints[0]];\n    const points = verPoints.map(vertex => {\n      const scaled_vertex = vertex.map(x => x * SCALE);\n      return new THREE.Vector3(...scaled_vertex);\n    });\n    const geometry = new THREE.ConvexGeometry(points);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0x91C4F8,\n      //shading: THREE.FlatShading,\n      polygonOffset: true,\n      polygonOffsetFactor: 1, // positive value pushes polygon further away\n      polygonOffsetUnits: 1,\n      opacity: 0.5,\n      transparent: true\n    });\n    this.mesh = new THREE.Mesh(geometry, material);\n    const geo = new THREE.EdgesGeometry(geometry); // or WireframeGeometry\n    const mat = new THREE.LineBasicMaterial({ color: 0x91C4F8, linewidth: 1 });\n    const wireframe = new THREE.LineSegments(geo, mat);\n    this.mesh.add(wireframe);\n    this.scene.add(this.mesh);\n  };\n\n  addAxes = () => {\n    const axes = new THREE.AxesHelper(1.5 * SCALE);\n    this.scene.add(axes);\n    const typeface = require(\"three/examples/fonts/helvetiker_regular.typeface.json\");\n    const font = new THREE.Font(typeface);\n\n    const numConfig = [\n      // color, position, rotation\n      [\n        0xff0000,\n        [SCALE + SCALE / (FACTOR * 2), 0, 0],\n        [Math.PI / 2, Math.PI, 0]\n      ],\n      [\n        0x00ff00,\n        [0, SCALE - SCALE / (FACTOR * 2), 0],\n        [Math.PI / 2, Math.PI / 2, 0]\n      ],\n      [\n        0x0000ff,\n        [\n          SCALE / (FACTOR * Math.sqrt(2)),\n          -SCALE / (FACTOR * Math.sqrt(2)),\n          SCALE\n        ],\n        [Math.PI / 2, (Math.PI * 3) / 4, 0]\n      ]\n    ];\n\n    numConfig.forEach(([color, position, rotation]) => {\n      const shape = font.generateShapes(\"1\", SCALE / FACTOR);\n      const geometry = new THREE.ShapeBufferGeometry(shape);\n      const mesh = new THREE.Mesh(\n        geometry,\n        new THREE.MeshBasicMaterial({\n          color: color,\n          side: THREE.DoubleSide\n        })\n      );\n      mesh.position.set(...position);\n      mesh.rotation.set(...rotation);\n      this.scene.add(mesh);\n    });\n    window.lines = [];\n    const lineConfig = [\n      [0xff0000, [SCALE, 0, 0], [0, 0, 0]],\n      [0x00ff00, [0, SCALE, 0], [0, 0, -Math.PI / 2]],\n      [0x0000ff, [0, 0, SCALE], [0, 0, -Math.PI / 2]]\n    ];\n    lineConfig.forEach(([color, position, rotation]) => {\n      const material = new THREE.LineBasicMaterial({\n        color\n      });\n      const geometry = new THREE.Geometry();\n      geometry.vertices.push(\n        new THREE.Vector3(0, 0, 0),\n        new THREE.Vector3(0, SCALE / (2 * FACTOR))\n      );\n      const line = new THREE.Line(geometry, material);\n      line.position.set(...position);\n      line.rotation.set(...rotation);\n      this.scene.add(line);\n      window.lines.push(line);\n    });\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props.vertices !== prevProps.vertices) {\n      if (this.mesh) {\n        this.scene.remove(this.mesh);\n        this.mesh.geometry.dispose();\n        this.mesh.material.dispose();\n      }\n      this.drawGeometry();\n    }\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = window.requestAnimationFrame(this.animate);\n    }\n  };\n\n  stop = () => {\n    window.cancelAnimationFrame(this.frameId);\n  };\n\n  animate = () => {\n    this.controls.update();\n    this.renderer.render(this.scene, this.camera);\n    this.frameId = window.requestAnimationFrame(this.animate);\n  };\n\n  render() {\n    return (\n      <div\n        style={{ width: \"25rem\", height: \"25rem\" }}\n        ref={mount => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\n\nexport default ConvexHull;\n","import React from \"react\";\nimport Slider from \"react-slick\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleUp, faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { connect } from \"react-redux\";\n\n\nfunction Line({ color }) {\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"2rem\",\n        alignItems: \"center\",\n        display: \"flex\"\n      }}\n    >\n      <div style={{ width: \"100%\", height: \"2px\", backgroundColor: color }} />\n    </div>\n  );\n}\n\nfunction SlideItem({ text }) {\n  return (\n    <div\n      style={{\n        height: \"2rem\",\n        alignItems: \"center\",\n        display: \"flex\",\n        justifyContent: \"center\"\n      }}\n    >\n      {text}\n    </div>\n  );\n}\n\n// show/change the selected attributes for displaying the convex hull\nclass Legend extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let attrData = [\n            { id: 1, name: \"Type\"},\n            { id: 2, name: \"Power\"},\n            { id: 3, name: \"Transmission\"},\n            { id: 4, name: \"Price (USD)\"},\n            { id: 5, name: \"Year\"},\n            { id: 6, name: \"Power (HP)\"},\n            { id: 7, name: \"Used KM\"}\n        ];\n\n        if(this.props.selectedDataset === \"nba\") {\n            attrData = [\n                {id: 1, name: \"Position\"},\n                {id: 2, name: \"Style\"},\n                {id: 3, name: \"Division\"},\n                {id: 4, name: \"Score\"},\n                {id: 5, name: \"Foul\"},\n                {id: 6, name: \"Rebound\"},\n                {id: 7, name: \"Turnover\"}\n            ]\n        }\n\n        this.attributes = [];\n        attrData.slice(3).forEach((attr) => {\n            if (this.props.mask[attr.name] === 1)\n                this.attributes.push(attr.name);\n        });\n        console.log(this.attributes);\n    }\n  render() {\n    const settings = {\n      dots: false,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 3,\n      slidesToScroll: 1,\n      vertical: true,\n      verticalSwiping: true,\n      arrows: false,\n      swipeToSlide: true,\n      afterChange: this.props.changeStartingIndex\n    };\n    return (\n      <div\n        title=\"Click the arrows to change the selected attributes for displaying the convex hull.\"\n        style={{\n          width: \"12rem\"\n        }}\n      >\n          <br /><br /><br /><br />\n        <div\n          style={{\n            alignItems: \"center\",\n            width: \"4rem\",\n            display: \"inline-block\",\n            verticalAlign: \"middle\"\n          }}\n        >\n          <Line color=\"#ff0000\" />\n          <Line color=\"#00ff00\" />\n          <Line color=\"#0000ff\" />\n        </div>\n        <div\n          style={{\n            width: \"8rem\",\n            display: \"inline-block\",\n            verticalAlign: \"middle\"\n          }}\n        >\n          <div\n            onClick={() => this.slider.slickPrev()}\n            style={{ cursor: \"pointer\" }}\n          >\n            <FontAwesomeIcon icon={faAngleUp} />\n          </div>\n            <Slider {...settings} ref={self => (this.slider = self)}>\n                {this.attributes.map((attr, key) => (<SlideItem key={key} text={attr}/>))}\n                {this.attributes.map((attr, key) => (<SlideItem key={key} text={attr}/>))}\n            </Slider>\n          <div\n            onClick={() => this.slider.slickNext()}\n            style={{ cursor: \"pointer\" }}\n          >\n            <FontAwesomeIcon icon={faAngleDown} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ mask, attributes, selectedDataset }) => ({\n    mask,\n    attributes,\n    selectedDataset\n});\n\nexport default connect(mapStateToProps)(Legend);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport ConvexHull from \"./ConvexHull\";\nimport Legend from \"./Legend\";\n\n// to visualize the preference space.\nclass PreferenceSpace extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: 0,\n      convexHullVertices: props.vertices.map(vert => vert.slice(0, 3))\n    };\n  }\n\n  updateContextHullVertices = index => {\n\n    const convexHullVertices = this.props.vertices.map(vertext => {\n      const vert = [];\n      for (let i = 0; i < 3; ++i) {\n        vert.push(vertext[(i + index) % vertext.length]);\n      }\n      return vert;\n    });\n    this.setState({ convexHullVertices });\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props.vertices !== prevProps.vertices) {\n      this.updateContextHullVertices(this.state.index);\n    }\n  }\n\n  changeStartingIndex = index => {\n    this.setState({ index });\n    // explicitly pass index to this.updateContextHullVertices\n    // because this.state.index is not updated immediately,\n    // i.e., this.state.index has still the old value at this line.\n    this.updateContextHullVertices(index);\n  };\n\n  render() {\n    return (\n      <div style={{width: '40rem' }}>\n        <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"flex-start\", width: '40rem' }}>\n          <ConvexHull vertices={this.state.convexHullVertices} />\n          &nbsp;&nbsp;&nbsp;&nbsp;\n          <Legend changeStartingIndex={this.changeStartingIndex} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ vertices }) => ({ vertices });\n\nexport default connect(mapStateToProps)(PreferenceSpace);\n","import React from \"react\";\nimport Histogram from \"./Histogram\";\nimport PreferenceSpace from \"./PreferenceSpace\";\n\nfunction Visuals() {\n  return (\n    <div>\n      <h2>Visuals</h2>\n      <div className=\"row justify-content-center\">\n        <div className=\"col-6\" style={{ minWidth: \"500px\" }}>\n          <Histogram />\n        </div>\n        <div className=\"col-6\" style={{ minWidth: \"500px\" }}>\n          <PreferenceSpace />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Visuals;\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport classNames from \"classnames\";\r\n\r\n// statistics including the number of tuples pruned/left.\r\nclass Stats extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.attributes = [];\r\n    this.props.attributes.forEach(([attr, config]) => {\r\n      if (this.props.mask[attr]) {\r\n        this.attributes.push(attr);\r\n      }\r\n    });\r\n    this.state = {\r\n      showMorePrune: false,\r\n      showMoreLeft: false\r\n    };\r\n  }\r\n\r\n  toggleShowMorePrune = () => {\r\n    this.setState(prevState => ({\r\n      showMorePrune: !prevState.showMorePrune\r\n    }));\r\n  };\r\n\r\n  toggleShowMoreLeft = () => {\r\n    this.setState(prevState => ({\r\n      showMoreLeft: !prevState.showMoreLeft\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    let ths = [<th key=\"Step No.\">Step</th>];\r\n    this.attributes.forEach(attr => {\r\n      ths.push(<th key={attr}>{attr}</th>);\r\n    });\r\n    const prunedTrs = this.props.prunedPoints.map(([idx, step], i) => (\r\n      <tr key={i} data-toggle=\"tooltip\">\r\n        {[step, ...this.props.candidates[idx]].map((x, j) => (\r\n          <td key={j}>{x}</td>\r\n        ))}\r\n      </tr>\r\n    ));\r\n\r\n    console.log(this.props.leftPoints);\r\n    const leftTrs = this.props.leftPoints.map((idx, i) => (\r\n      <tr key={i} data-toggle=\"tooltip\" >\r\n        {this.props.candidates[idx].map((x, j) => (\r\n          <td key={j}>{x}</td>\r\n        ))}\r\n      </tr>\r\n    ));\r\n\r\n\r\n    const { showMorePrune, showMoreLeft} = this.state;\r\n    const moreTextPrune = \"According to your answers to questions, we learn \" +\r\n        \"your preference on tuples and prune the unsuitable tuples. Note that *step* represents \" +\r\n        \"the tuples are pruned when how many questions are answered. \";\r\n\r\n    const moreTextLeft = \"Based on your answers to questions, these are the candidate \" +\r\n        \"tuples that you might prefer. \";\r\n\r\n    return (\r\n        <div className=\"scrollable-container\">\r\n          &nbsp;&nbsp;&nbsp;&nbsp;\r\n          <div className=\"scrollable-item\">\r\n            <div style={{ width: \"40rem\", height: \"26rem\", backgroundColor: \"#F8F8F8\"}}>\r\n              <table className={classNames(\"table\", \"table-hover\", {\"table-fixed\": true //prunedTrs.length > 7\r\n              })} style={{minWidth: \"40rem\"}}>\r\n                <thead>\r\n                  <tr>{ths}</tr>\r\n                </thead>\r\n                <tbody>{prunedTrs}</tbody>\r\n              </table>\r\n            </div>\r\n            <div>\r\n              <h4  style={{'padding': '10px'}}>Table: The Tuples Pruned</h4>\r\n              <p className=\"text-t-align\" style={{ width: \"40rem\" }}>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;This figure shows the tuples pruned. {showMorePrune ? moreTextPrune : ' '}\r\n                <button className=\"toggleButton\" onClick={this.toggleShowMorePrune}>\r\n                  {showMorePrune ? <span className=\"foldText\">&nbsp;fold</span> : <span className=\"foldText\">...unfold</span>}\r\n                </button>\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          &nbsp;&nbsp;\r\n        <div className=\"scrollable-item\">\r\n            <div style={{ width: \"40rem\", height: \"26rem\", backgroundColor: \"#F8F8F8\"}}>\r\n              <table\r\n                className={classNames(\"table\", \"table-hover\", {\r\n                \"table-fixed\": true //leftTrs.length > 7\r\n              })}\r\n              style={{\r\n                minWidth: \"40rem\"\r\n              }}>\r\n              <thead>\r\n                <tr>{ths.slice(1)}</tr>\r\n              </thead>\r\n              <tbody>{leftTrs}</tbody>\r\n              </table>\r\n            </div>\r\n            <div>\r\n              <h4  style={{'padding': '10px'}}>Table: The Candidate Tuples</h4>\r\n              <p className=\"text-t-align\" style={{ width: \"40rem\" }}>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;This figure shows the candidate tuples. {showMoreLeft ? moreTextLeft : ' '}\r\n                <button className=\"toggleButton\" onClick={this.toggleShowMoreLeft}>\r\n                  {showMoreLeft ? <span className=\"foldText\">&nbsp;fold</span> : <span className=\"foldText\">...unfold</span>}\r\n                </button>\r\n              </p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToPropsStats = ({\r\n  labels,\r\n  candidates,\r\n  prunedPoints,\r\n  leftPoints,\r\n  attributes,\r\n  mask\r\n}) => ({\r\n  labels,\r\n  candidates,\r\n  prunedPoints,\r\n  leftPoints,\r\n  attributes,\r\n  mask\r\n});\r\n\r\nexport default connect(mapStateToPropsStats)(Stats);\r\n","import React from \"react\";\r\nimport {\r\n    setActiveComponent,\r\n    setCandidates,\r\n    toggleMask,\r\n    changeMode\r\n} from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { selectCandidates } from \"../utils\";\r\n\r\n\r\n\r\n// the welcome scene containing a brief introduction and a table to obtain the user's input\r\nclass PhaseTwo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputs = {};\r\n        this.inputs.name = React.createRef();\r\n        this.inputs.email = React.createRef();\r\n    }\r\n\r\n    handleStart = () => {\r\n        this.props.start();\r\n    };\r\n\r\n    handleModeChange = event => {\r\n        this.props.changeMode(event.target.value);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-center m-auto\" style={{ maxWidth: \"40rem\" }}>\r\n                <h1>Phase Two: Evaluation</h1>\r\n                <br />\r\n                <br />\r\n                <h4 >\r\n                    You just ended phase one. We are now going to phase two Evaluation. We will present you some cars and ask you\r\n                    whether you are interested in them. <br />\r\n                </h4>\r\n                <br />\r\n                <p className=\"lead text-muted\">\r\n                    Click the \"Continue\" button to continue. <br />\r\n                </p>\r\n                <div>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary\"\r\n                        style={{ width: \"8rem\" }}\r\n                        onClick={this.handleStart}\r\n                    >\r\n                        Continue\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ attributes, mask, points, mode }) => ({\r\n    attributes,\r\n    mask,\r\n    points,\r\n    mode\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    start: () => {\r\n        dispatch(setActiveComponent(\"Result\"));\r\n    },\r\n    toggleMask: (attr, mask) => dispatch(toggleMask(attr, mask)),\r\n    changeMode: mode => dispatch(changeMode(mode))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(PhaseTwo);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport classNames from \"classnames\";\r\nimport { setActiveComponent, restart } from \"../actions\";\r\nimport Histogram from \"./Histogram\";\r\n\r\n// show the number of questions asked and the favourite car/remaining cars.\r\nfunction Result({candidates, leftPoints, attributes, mask, numLeftPoints, restart})\r\n{\r\n  let ths = [];\r\n  attributes.forEach(([attr, config]) => {\r\n    if (mask[attr]) {\r\n      const th = <th key={attr}>{attr}</th>;\r\n      ths.push(th);\r\n    }\r\n  });\r\n  const trs = leftPoints.map((idx, i) => (\r\n      <tr key={i} data-toggle=\"tooltip\">\r\n        {candidates[idx].map((x, j) => {return <td key={j}>{x}</td>})}\r\n      </tr>\r\n  ));\r\n  return (\r\n      <div className=\"justify-content-center\">\r\n        <h4>The Total No. of Questions Asked is: {numLeftPoints.length - 1}.</h4>\r\n        <h4>\r\n          {leftPoints.length === 1\r\n              ? \"Your Favourite Tuple is:\"\r\n              : `${leftPoints.length} Tuples Left in the Database:`}\r\n        </h4>\r\n        <table\r\n            className={classNames(\"table\", \"table-hover\", {\r\n              \"table-fixed\": trs.length > 7\r\n            })}\r\n            style={{\r\n              maxWidth: \"40rem\",\r\n              margin: \"auto\"\r\n            }}\r\n        >\r\n          <thead>\r\n          <tr>{ths}</tr>\r\n          </thead>\r\n          <tbody>{trs}</tbody>\r\n        </table>\r\n        <div className=\"d-flex justify-content-center my-3\">\r\n          <Histogram />\r\n        </div>\r\n        <div>\r\n            <button type=\"button\"\r\n                    className=\"modern-btn\"\r\n                    style={{ width: \"12rem\" }}\r\n                    onClick={restart}>\r\n            Return to Home\r\n          </button>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({candidates, leftPoints, attributes, mask, numLeftPoints}) => ({\r\n  candidates,\r\n  leftPoints,\r\n  attributes,\r\n  mask,\r\n  numLeftPoints\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  restart: () => {\r\n    dispatch(setActiveComponent(\"Welcome\"));\r\n    dispatch(restart());\r\n  }\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Result);","import React from \"react\";\r\nimport { setActiveComponent,\r\n        setLeftPoints,\r\n        prunePoints,\r\n        restart } from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { loadCarDataset } from \"../utils\";\r\nimport '../css/Tree.css';\r\nimport Histogram from \"./Histogram\"\r\nimport Stats from \"./Stats\";\r\nimport TitleTree from \"../imgs/TitleTree.png\";\r\n\r\nlet attrData = [];\r\nlet carLength = 5;\r\nlet numOfQuestion = 0;\r\nlet prevLeftPoints = [];\r\nlet targetLevel = 3;\r\n\r\nconst TreeNode = ({ node, nodes, level = 0 }) => {\r\n    const childNodes = nodes.filter(child => child.parentId === node.id);\r\n\r\n    return (\r\n        <li>\r\n            <a href=\"#\">{node.name}</a> \r\n            {childNodes.length > 0 && (\r\n                <ul>\r\n                    {childNodes.map(child => (\r\n                        <TreeNode node={child} nodes={nodes} level={level + 1} />\r\n                    ))}\r\n                </ul>\r\n            )}\r\n        </li> \r\n    );\r\n};\r\n\r\n\r\nfunction getAllPaths(tree, currentPath = []) {\r\n    if (!tree) return [];\r\n\r\n    currentPath.push(tree.name);\r\n    if (!tree.children || tree.children.length === 0) {\r\n        return [currentPath];\r\n    }\r\n\r\n    let paths = [];\r\n    for (let child of tree.children) {\r\n        paths = paths.concat(getAllPaths(child, [...currentPath]));\r\n    }\r\n\r\n    return paths;\r\n}\r\n\r\n\r\nfunction dfs(tree, path = [], targetLevel, currentLevel = 1) {\r\n    path.push(tree);\r\n\r\n    // 当前层是目标层，检查孩子的数量\r\n    if (currentLevel === targetLevel && tree.children && tree.children.length >= 2)\r\n    {\r\n        return path;\r\n    }\r\n\r\n    if (tree.children) {\r\n        for (let child of tree.children) {\r\n            const result = dfs(child, [...path], targetLevel, currentLevel + 1);\r\n            if (result) return result;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n\r\nfunction findQuestion(tree)\r\n{\r\n    let result = null;\r\n    while (targetLevel > 0) {\r\n        result = dfs(tree, [], targetLevel);\r\n        if (result) break;\r\n        targetLevel--;\r\n    }\r\n\r\n    if(!result)\r\n    {\r\n        let pair1 = [];\r\n        let nodeIndex = tree;\r\n        pair1.push(nodeIndex);\r\n        while(nodeIndex.children)\r\n        {\r\n            pair1.push(nodeIndex.children[0]);\r\n            nodeIndex = nodeIndex.children[0];\r\n        }\r\n        return [pair1];\r\n    }\r\n\r\n    let pair1 = [...result];\r\n    let nodeIndex = result[result.length - 1].children[0];\r\n    pair1.push(nodeIndex);\r\n    while(nodeIndex.children)\r\n    {\r\n        pair1.push(nodeIndex.children[0]);\r\n        nodeIndex = nodeIndex.children[0];\r\n    }\r\n\r\n    let pair2 = [...result];\r\n    nodeIndex = result[result.length - 1].children[1];\r\n    pair2.push(nodeIndex);\r\n    while(nodeIndex.children)\r\n    {\r\n        pair2.push(nodeIndex.children[0]);\r\n        nodeIndex = nodeIndex.children[0];\r\n    }\r\n    return [pair1, pair2]\r\n}\r\n\r\n\r\n// the welcome scene containing a brief introduction and a table to obtain the user's input\r\nclass SPTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        /*const cars = [\r\n            [ \"suv\", \"diesel\", \"automatic\", \"car: 1\"],\r\n            [ \"limousine\", \"benzin\", \"manual\", \"car: 1\"],\r\n            [ \"suv\", \"diesel\", \"manual\", \"car: 1\"],\r\n            [ \"coupe\", \"benzin\", \"manual\", \"car: 1\"],\r\n            [ \"limousine\", \"benzin\", \"automatic\", \"car: 1\"],\r\n            [ \"limousine\", \"diesel\", \"automatic\", \"car: 1\"],\r\n            [ \"limousine\", \"diesel\", \"manual\", \"car: 1\"],\r\n            [ \"coupe\", \"benzin\", \"automatic\", \"car: 1\"],\r\n            [ \"suv\",\t\"benzin\", \"automatic\", \"car: 1\"],\r\n            [ \"coupe\", \"diesel\", \"manual\", \"car: 1\"],\r\n            [ \"limousine\", \"lpg\", \"automatic\", \"car: 1\"],\r\n            [ \"coupe\", \"diesel\", \"automatic\", \"car: 1\"],\r\n            [ \"suv\", \"benzin\", \"manual\", \"car: 1\"],\r\n            [ \"suv\", \"lpg\", \"automatic\", \"car: 1\"],\r\n            [ \"limousine\", \"lpg\", \"manual\", \"car: 1\"],\r\n            [ \"coupe\", \"lpg\", \"automatic\", \"car: 1\"],\r\n            [ \"suv\",\t\"lpg\", \"manual\", \"car: 1\"],\r\n            [ \"coupe\", \"lpg\", \"manual\", \"car: 1\"],\r\n            [ \"limousine\", \"cng\", \"automatic\", \"car: 1\"],\r\n            [ \"limousine\", \"cng\", \"manual\", \"car: 1\"]\r\n        ];\r\n         */\r\n\r\n        console.log(this.props.mask);\r\n        numOfQuestion = 0; targetLevel = 3; prevLeftPoints = [];\r\n        carLength = this.props.candidates[0].length;\r\n        attrData = [{id: 1, name: \"Root\", parentId: null},\r\n                {id: 2, name: \"Type\", parentId: 1},\r\n                {id: 3, name: \"Power\", parentId: 2},\r\n                {id: 4, name: \"Transmission\", parentId: 3},\r\n                {id: 5, name: \"Car\", parentId: 4}\r\n            ];\r\n\r\n        if(this.props.selectedDataset === \"nba\") {\r\n            attrData = [{id: 1, name: \"Root\", parentId: null},\r\n                {id: 2, name: \"Position\", parentId: 1},\r\n                {id: 3, name: \"Style\", parentId: 2},\r\n                {id: 4, name: \"Division\", parentId: 3},\r\n                {id: 5, name: \"Car\", parentId: 4}\r\n            ];\r\n        }\r\n\r\n        let cars = [];\r\n        for(let i = 0; i < this.props.candidates.length; ++i)\r\n        {\r\n            const car = [];\r\n            for (let j = 0; j < this.props.candidates[i].length; ++j)\r\n                car.push(this.props.candidates[i][j]);\r\n            car.push(\"TupleID: \" + (i+1));\r\n            cars.push(car);\r\n        }\r\n\r\n        let indexes = [];\r\n        for(let i = 0; i < this.props.candidates.length; ++i)\r\n        {\r\n            indexes.push(i);\r\n            prevLeftPoints.push(i);\r\n        }\r\n        this.props.setLeftPoints(indexes);\r\n\r\n        attrData = attrData.filter((attr, index) =>\r\n            index === 0 || index === attrData.length - 1 || this.props.mask[attr.name] === 1\r\n        );\r\n        attrData = attrData.map((attr, index) => {\r\n            return {\r\n                ...attr,\r\n                id: index + 1,\r\n                parentId: index === 0 ? attr.parentId : index\r\n            };\r\n        });\r\n\r\n        const tree = this.generateCarTree(cars);\r\n        const nodesData = this.treeToNodesData(tree);\r\n        const pair = findQuestion(tree);\r\n        this.state = {\r\n            cars: cars,\r\n            tree: tree,\r\n            nodesData: nodesData,\r\n            pair: pair\r\n        };\r\n    }\r\n\r\n    addCarToTree = (tree, car) => {\r\n        if (car.length === 1) \r\n            {\r\n                if (!tree.children) \r\n                {\r\n                    tree.children = [];\r\n                }\r\n                tree.children.push({ name: car[0] }); // This is a leaf node\r\n                return;\r\n            }\r\n            if (!tree.children) \r\n            {\r\n                tree.children = [];\r\n            }\r\n            let node = tree.children.find(child => child.name === car[0]);\r\n            if (!node) \r\n            {\r\n                node = { name: car[0] };\r\n                tree.children.push(node);\r\n            }\r\n            this.addCarToTree(node, car.slice(1));\r\n    };\r\n    generateCarTree = (cars) => {\r\n            const tree = { name: 'Root' };\r\n            for (const car of cars) \r\n            {\r\n                this.addCarToTree(tree, car);\r\n            }\r\n            return tree;\r\n    };\r\n    treeToNodesData = (tree) => {\r\n        const nodesData = [];\r\n        const queue = [{ node: tree, parentId: null }];\r\n        let currentId = 1;\r\n\r\n        while (queue.length > 0) {\r\n            const { node, parentId } = queue.shift();\r\n\r\n            nodesData.push({ id: currentId, name: node.name, parentId });\r\n\r\n            // If the current tree node has children, add them to the queue with current nodeId as their parentId.\r\n            if (node.children) {\r\n                for (const child of node.children) {\r\n                queue.push({ node: child, parentId: currentId });\r\n                }\r\n            }\r\n\r\n            currentId++;\r\n        }\r\n\r\n        return nodesData;\r\n    };\r\n\r\n    removeChildWithName = (node, nameToRemove, referenceName) => {\r\n        if (!node.children || node.children.length === 0) return node;\r\n\r\n        let namesFound = 0;\r\n        for (let i = 0; i < node.children.length; i++) {\r\n            const child = node.children[i];\r\n            if (child.name === nameToRemove || child.name === referenceName) {\r\n                namesFound++;\r\n            }\r\n        }\r\n\r\n        let newChildren = [...node.children];\r\n        if (namesFound >= 2) {\r\n            newChildren = newChildren.filter(child => child.name !== nameToRemove);\r\n        }\r\n\r\n        return {\r\n            ...node,\r\n            children: newChildren.map(child => this.removeChildWithName(child, nameToRemove, referenceName))\r\n        };\r\n    }\r\n\r\n    choose = (choice) => {\r\n        numOfQuestion++;\r\n        let updatedTree;\r\n        if(choice === 0)\r\n            updatedTree = this.removeChildWithName(this.state.tree,\r\n                this.state.pair[1][targetLevel].name,\r\n                this.state.pair[0][targetLevel].name);\r\n        else if(choice === 1)\r\n            updatedTree = this.removeChildWithName(this.state.tree,\r\n                this.state.pair[0][targetLevel].name,\r\n                this.state.pair[1][targetLevel].name);\r\n\r\n        const updateNodesData = this.treeToNodesData(updatedTree);\r\n        const updatePair = findQuestion(updatedTree);\r\n        const TLeftTuples = getAllPaths(updatedTree);\r\n        let allLeftTuples = [];\r\n        for(let i = 0; i < TLeftTuples.length; ++i)\r\n            allLeftTuples.push(TLeftTuples[i].slice(1, TLeftTuples[i].length - 1));\r\n\r\n        console.log(allLeftTuples);\r\n        let indexes = [];\r\n        for (let tuple of allLeftTuples)\r\n        {\r\n            let tupleStr = tuple.join(',');\r\n            let foundIndex = this.props.candidates.findIndex(candidate => candidate.join(',') === tupleStr);\r\n            if (foundIndex !== -1) {\r\n                indexes.push(foundIndex);\r\n            }\r\n        }\r\n        console.log(prevLeftPoints);\r\n        console.log(indexes);\r\n        const pruneIndexes = prevLeftPoints.filter(point => !indexes.includes(point));\r\n        console.log(pruneIndexes);\r\n\r\n        prevLeftPoints = indexes;\r\n        this.props.prunePoints(pruneIndexes, numOfQuestion);\r\n\r\n        if(updatePair.length < 2)\r\n            this.props.showResult();\r\n\r\n        this.setState({\r\n            tree: updatedTree,\r\n            nodesData: updateNodesData,\r\n            pair: updatePair\r\n        }, () => {\r\n            console.log(this.state.tree);\r\n            console.log(this.state.nodesData);\r\n            console.log(this.state.pair);\r\n        });\r\n    }\r\n\r\n    startAgain = () =>\r\n    {\r\n        this.props.restartedAgain();\r\n        console.log(this.props.candidates);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        const container = document.querySelector('.scrollable-container');\r\n        container.scrollLeft = (container.scrollWidth - container.clientWidth) / 2;\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let ths = null, trs = null;\r\n        console.log(attrData);\r\n        if(this.state.pair.length > 1) {\r\n            ths = [<th key=\"Option No.\">Option</th>];\r\n            attrData.slice(0, carLength + 1).slice(1).forEach(attr => {\r\n                ths.push(<th key={attr.id}>{attr.name}</th>);\r\n            });\r\n            ths.push(<th key=\"chooseButton\"/>);\r\n\r\n            trs = this.state.pair.map((idx, i) => {\r\n                const tds = [<td key=\"Option No.\">{i+1}</td>];\r\n                idx.slice(0, carLength + 1).slice(1).forEach((x, j) => {\r\n                    tds.push(<td key={j}>{x.name}</td>);\r\n                });\r\n\r\n                tds.push(\r\n                    <td key=\"chooseButton\">\r\n                        <button type=\"button\"\r\n                                className=\"choose-btn\"\r\n                                style={{ width: \"6rem\", height: \"1.5rem\" }}\r\n                                onClick={() => this.choose(i)}>\r\n                            Choose\r\n                        </button>\r\n                    </td>\r\n                );\r\n\r\n                return (\r\n                    <tr key={i} data-toggle=\"tooltip\">\r\n                        {tds}\r\n                    </tr>\r\n                );\r\n            });\r\n        }\r\n        else {\r\n            ths = [<th key=\"Option No.\"></th>];\r\n            attrData.slice(0, carLength + 1).slice(1).forEach(attr => {\r\n                ths.push(<th key={attr.id}>{attr.name}</th>);\r\n            });\r\n\r\n            trs = this.state.pair.map((idx, i) => {\r\n                const tds = [<td key=\"Option No.\">{idx[carLength+1].name}</td>];\r\n                idx.slice(0, carLength + 1).slice(1).forEach((x, j) => {\r\n                    tds.push(<td key={j}>{x.name}</td>);\r\n                });\r\n\r\n                return (\r\n                    <tr key={i} data-toggle=\"tooltip\">\r\n                        {tds}\r\n                    </tr>\r\n                );\r\n            });\r\n        }\r\n\r\n        const rootNode = this.state.nodesData.find(node => node.parentId === null);\r\n        const rootAttr = attrData.find(node => node.parentId === null);\r\n\r\n        if(this.state.pair.length > 1)\r\n        {\r\n            return (\r\n                <div className=\"text-center m-auto\" style={{}}>\r\n                    <img alt='' src={TitleTree} style={{ 'width': '100%' }} />\r\n                    <p style={{ 'background': 'gainsboro', 'borderRadius': '5px', 'padding': '10px',\r\n                        'fontSize': '16px', 'textAlign': 'left'}}>\r\n                        <span style={{ 'fontSize': '20px'}}><strong>Instruction:</strong></span> You will be asked with\r\n                        multiple questions so that we can learn your preference on tuples, and then, find your favorite one. There are three parts in the following.\r\n                        <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Part 1:</em> It interacts with you by asking questions.\r\n                        <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Part 2:</em> It shows the middle results of algorithm SP-Tree.\r\n                        <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Part 3:</em> It shows the statistic of the performance of algorithm SP-Tree.\r\n                    </p>\r\n                    <br/>\r\n                    <h4 style={{\r\n                        'background': 'linear-gradient(to right, #89bfe9, #5271a6)', // 添加从左到右的颜色渐变\r\n                        'borderRadius': '5px',\r\n                        'textAlign': 'left',\r\n                        'padding': '5px',\r\n                        'boxShadow': '3px 3px 5px rgba(0, 0, 0, 0.5)'  // 添加稍微的阴影效果\r\n                    }}>\r\n                        <strong><em>&nbsp;PART 1:</em></strong> Interaction\r\n                    </h4>\r\n                    <p style={{ 'background': 'gainsboro', 'borderRadius': '5px', 'padding': '5px',\r\n                        'fontSize': '16px', 'textAlign': 'left'}}>\r\n                        <strong>&nbsp;NOTE: </strong>Choose the Tuple you favor more between the following options\r\n                    </p>\r\n                    <div className=\"row justify-content-center align-items-center\">\r\n                        <div className=\"col-md-8\">\r\n                            <table className=\"table table-hover text-center\">\r\n                                <thead>\r\n                                <tr>{ths}</tr>\r\n                                </thead>\r\n                                <tbody>{trs}</tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    <h4 style={{\r\n                        'background': 'linear-gradient(to right, #89bfe9, #5271a6)', // 添加从左到右的颜色渐变\r\n                        'borderRadius': '5px',\r\n                        'textAlign': 'left',\r\n                        'padding': '5px',\r\n                        'boxShadow': '3px 3px 5px rgba(0, 0, 0, 0.5)'  // 添加稍微的阴影效果\r\n                    }}>\r\n                        <strong><em>&nbsp;PART 2:</em></strong> Visuals\r\n                    </h4>\r\n                    <p style={{ 'background': 'gainsboro', 'borderRadius': '5px', 'padding': '10px',\r\n                        'fontSize': '16px', 'textAlign': 'left'}}>\r\n                        <strong>NOTE: </strong>Here shows the C-Tree. Each leaf contains a tuple and each internal\r\n                        node contains a categorical value. For each leaf, the shortest path from the root to it contains\r\n                        all the categorical values of the tuple in it.\r\n                    </p>\r\n                    <div class=\"trees-container\">\r\n                        <div class=\"tree1\">\r\n                            <div className=\"tree\">\r\n                                <ul>\r\n                                    <TreeNode node={rootAttr} nodes={attrData}/>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;\r\n                        <div class=\"tree2\">\r\n                            <div className=\"tree\">\r\n                                <ul>\r\n                                    <TreeNode node={rootNode} nodes={this.state.nodesData}/>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"trees-container\">\r\n                        <div className=\"tree21\">\r\n                            <h4 style={{'width': '8.75rem', 'padding': '10px'}}>Attributes</h4>\r\n                        </div>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;\r\n                        <div className=\"tree22\">\r\n                            <h4 style={{'width': '100%', 'padding': '10px'}}>The C-Tree</h4>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <br />\r\n                    <h4 style={{\r\n                        'background': 'linear-gradient(to right, #89bfe9, #5271a6)', // 添加从左到右的颜色渐变\r\n                        'borderRadius': '5px',\r\n                        'textAlign': 'left',\r\n                        'padding': '5px',\r\n                        'boxShadow': '3px 3px 5px rgba(0, 0, 0, 0.5)'  // 添加稍微的阴影效果\r\n                    }}>\r\n                        <strong><em>&nbsp;PART 3:</em></strong> Statistics\r\n                    </h4>\r\n                    <p style={{ 'background': 'gainsboro', 'borderRadius': '5px', 'padding': '10px',\r\n                        'fontSize': '16px', 'textAlign': 'left'}}>\r\n                        <strong>NOTE: </strong>Here shows one figure and two tables that demonstrate the Candidate Tuples\r\n                        and the Tuples pruned during the interaction process.\r\n                    </p>\r\n\r\n                    <div className=\"scrollable-container\">\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;\r\n                        <div className=\"row justify-content-center\">\r\n                            <Histogram />\r\n                        </div>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                        <div className=\"row justify-content-center\">\r\n                            <Stats />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <br />\r\n                    <div>\r\n                        <button type=\"button\"\r\n                                className=\"modern-btn\"\r\n                                style={{ width: \"12rem\" }}\r\n                                onClick={this.startAgain}>\r\n                            Return to Home\r\n                        </button>\r\n                    </div>\r\n                    <br />\r\n\r\n                </div>\r\n            );\r\n        }\r\n        else\r\n        {\r\n            return (\r\n                <div className=\"text-center m-auto\" style={{}}>\r\n                    <h1>Algorithm: SP-Tree</h1>\r\n                    <br/>\r\n                    <br/>\r\n\r\n                    <h4>\r\n                        Based on your selection, the following is our recommendation.\r\n                    </h4>\r\n                    <div className=\"row justify-content-center align-items-center\">\r\n                        <div className=\"col-md-8\">\r\n                            <table className=\"table table-hover text-center\">\r\n                                <thead>\r\n                                <tr>{ths}</tr>\r\n                                </thead>\r\n                                <tbody>{trs}</tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"trees-container\">\r\n                        <div class=\"tree1\">\r\n                            <div className=\"tree\">\r\n                                <ul>\r\n                                    <TreeNode node={rootAttr} nodes={attrData}/>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"tree1\">\r\n                            <div className=\"tree\">\r\n                                <ul>\r\n                                    <TreeNode node={rootNode} nodes={this.state.nodesData}/>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            );\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ candidates, attributes, mask, points, numLeftPoints, leftPoints, selectedDataset }) => ({\r\n    attributes,\r\n    mask,\r\n    points,\r\n    candidates,\r\n    numLeftPoints,\r\n    leftPoints,\r\n    selectedDataset\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    showResult: () => {\r\n        dispatch(setActiveComponent(\"Result\"));\r\n    },\r\n    setLeftPoints: indices => {\r\n        dispatch(setLeftPoints(indices));\r\n    },\r\n    restartedAgain: () => {\r\n        dispatch(setActiveComponent(\"Welcome\"));\r\n        dispatch(restart());\r\n        console.log(\"start\");\r\n    },\r\n    prunePoints: (indices, step) => {\r\n        dispatch(prunePoints(indices, step));\r\n    }\r\n\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SPTree);","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  FlexibleXYPlot,\n  XAxis,\n  YAxis,\n  Hint,\n  VerticalBarSeries,\n  ChartLabel\n} from \"react-vis\";\nimport \"../css/textStyle.css\"\n\n\n// a histogram to show the number of tuples left vs the number of questions asked.\nclass HistogramForR extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hintValue: null,\n      showMore: false\n    };\n  }\n\n  toggleShowMore = () => {\n    this.setState(prevState => ({\n      showMore: !prevState.showMore\n    }));\n  };\n\n  _onMouseLeave = () => {\n    this.setState({\n      hintValue: null\n    });\n  };\n\n  _onNearestX = (value, { index }) => {\n    this.setState({\n      hintValue: this.props.data[index]\n    });\n  };\n\n  render() {\n    const { showMore } = this.state;\n    const moreText = \" As you answer questions, we can learn the importance of each numerical attributes of \" +\n        \"tuples to you. Since the numerical utility range approximates the ranges of those importance, \" +\n        \"the more questions you answer, the more precise approximation reaches, leading to a smaller \" +\n        \"numerical utility range and a reduced Diameter.\";\n\n\n\n    return (\n      <div>\n        <div style={{ width: \"30rem\", height: \"26rem\"}}>\n          <FlexibleXYPlot onMouseLeave={this._onMouseLeave}\n                          style={{ background: '#333' }}\n                          margin={{ left: 75, right: 20, top: 20, bottom: 60 }}>\n            <XAxis\n              tickValues={this.props.data.map((val, idx) => idx)}\n              tickFormat={value => value.toString()}\n              style={{\n                ticks: { fill: \"white\" },\n                text: { stroke: 'none', fill: 'white', fontWeight: 600, fontSize: '14px'}\n              }}\n            />\n            <YAxis\n              style={{\n                ticks: { fill: \"white\" },\n                text: { stroke: 'none', fill: 'white', fontWeight: 600, fontSize: '14px' }\n              }}\n            />\n            <ChartLabel\n                text=\"Number of Questions Answered\"\n                includeMargin={false}\n                xPercent={0.2}\n                yPercent={1.2}\n                style={{\n                  style: { fill: \"white\", fontSize: '14px' }\n                }}\n            />\n            <ChartLabel\n                text=\"Diameter of Numerical Utility Range\"\n                includeMargin={false}\n                xPercent={-0.13}\n                yPercent={0.3}\n                style={{\n                  transform: \"rotate(-90)\",\n                  textAnchor: \"end\",\n                  style: { fill: \"white\", fontSize: '14px' }\n                }}\n            />\n            <VerticalBarSeries\n              color=\"rgb(77, 182, 172)\"\n              onNearestX={this._onNearestX}\n              data={this.props.data}\n              animation\n              style={{\n                boxShadow: '2px 2px 4px rgba(0,0,0,0.5)', borderRadius: '5px 5px 0 0'\n              }}\n            />\n            {this.state.hintValue && (\n                <Hint value={this.state.hintValue}>\n                  <div style={{ background: 'rgba(0, 0, 0, 0.8)', padding: '5px', borderRadius: '5px', color: 'white' }}> {/* 添加背景，圆角和阴影 */}\n                    Number of Questions Answered: {this.state.hintValue.x}\n                    <br />\n                    Diameter of Numerical Utility Range: {this.state.hintValue.y}\n                  </div>\n                </Hint>\n            )}\n          </FlexibleXYPlot>\n        </div>\n        <div style={{ width: \"30rem\" }}>\n          <h4 style={{'padding': '10px'}}>Figure: Diameter -- Questions</h4>\n          {/*Essentially, this Diameter represents the maximum Euclidean distance\n          between any two points in the numerical utility range.*/}\n          <div>\n            <p className=\"text-t-align\">\n              &nbsp;&nbsp;&nbsp;&nbsp;This figure shows the Diameter of numerical utility range with the number of Questions you answer.\n              {showMore ? moreText : ' '}\n              <button className=\"toggleButton\" onClick={this.toggleShowMore}>\n                {showMore ? <span className=\"foldText\">&nbsp;fold</span> : <span className=\"foldText\">...unfold</span>}\n              </button>\n            </p>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n/*\nconst mapStateToProps = ({ numLeftPoints }) => ({\n  data: numLeftPoints.map((num, i) => ({ x: i, y: num }))\n});\n\n */\nconst mapStateToProps = ({ radius }) => {\n  let mappedData = radius.map((num, i) => ({ x: i, y: num }));\n\n  console.log(\"mappedData\" + mappedData);\n  if (mappedData.length === 1) {\n    mappedData.push({ x: 0.01, y: 0 });\n    mappedData.push({ x: -0.01, y: 0 });\n  }\n\n  return {\n    data: mappedData\n  };\n};\n\nexport default connect(mapStateToProps)(HistogramForR);\n","import React from \"react\";\r\nimport {\r\n    setActiveComponent,\r\n    setCandidates,\r\n    toggleMask,\r\n    changeMode,\r\n    setLeftPoints,\r\n    prunePoints,\r\n    restart,\r\n    updateConvexHull,\r\n    setRadius\r\n} from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport * as d3 from 'd3';\r\nimport io from 'socket.io-client';\r\nimport '../css/Graph.css'\r\nimport { normalized } from \"../utils\";\r\nimport Histogram from \"./Histogram\";\r\nimport HistogramForR from \"./HistogramForR\";\r\nimport PreferenceSpace from \"./PreferenceSpace\";\r\nimport Stats from \"./Stats\";\r\nimport \"../css/textStyle.css\"\r\nimport TitleGraph from \"../imgs/TitleGraph.png\";\r\n\r\nlet dcat = 3, dnum = 4;\r\nlet attrData = [];\r\nlet numOfQuestion = 0;\r\nlet prevLeftPoints = [];\r\n\r\n\r\nclass GEGraph extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ref = React.createRef();\r\n\r\n        dcat = Object.values(this.props.mask).slice(0, 3).filter((i) => i === 1).length;\r\n        dnum = Object.values(this.props.mask).slice(3).filter((i) => i === 1).length;\r\n        numOfQuestion = 0; prevLeftPoints = [];\r\n        attrData = [\r\n            { id: 1, name: \"Type\"},\r\n            { id: 2, name: \"Power\"},\r\n            { id: 3, name: \"Transmission\"},\r\n            { id: 4, name: \"Price (USD)\"},\r\n            { id: 5, name: \"Year\"},\r\n            { id: 6, name: \"Power (HP)\"},\r\n            { id: 7, name: \"Used KM\"}\r\n        ];\r\n\r\n        if(this.props.selectedDataset === \"nba\") {\r\n            attrData = [\r\n                {id: 1, name: \"Position\"},\r\n                {id: 2, name: \"Style\"},\r\n                {id: 3, name: \"Division\"},\r\n                {id: 4, name: \"Score\"},\r\n                {id: 5, name: \"Foul\"},\r\n                {id: 6, name: \"Rebound\"},\r\n                {id: 7, name: \"Turnover\"}\r\n            ]\r\n        }\r\n\r\n\r\n        attrData = attrData.filter((attr, index) => this.props.mask[attr.name] === 1);\r\n\r\n        let indexes = [];\r\n        for(let i = 0; i < this.props.candidates.length; ++i)\r\n        {\r\n            indexes.push(i);\r\n            prevLeftPoints.push(i);\r\n        }\r\n        this.props.setLeftPoints(indexes);\r\n        this.props.setRadius([1.414213]);\r\n\r\n        this.state = {\r\n            pair: [],\r\n            nodeVec: [],\r\n            upper: [],\r\n            lower: [],\r\n            relationVec: [],\r\n            extVec: [],\r\n            numUtilityVec: [],\r\n            showMoreGraph: false,\r\n            showMoreRange: false\r\n        };\r\n\r\n        // Initialize socket connection\r\n        this.socket = io.connect('http://39.108.168.228:5000');\r\n\r\n        // Set up event listeners for the socket\r\n        this.socket.on('initialized', (data) => {\r\n            this.setState({\r\n                pair: [data.pair1, data.pair2],\r\n                nodeVec: data.node_vectors,\r\n                upper: data.node_upperBound,\r\n                lower: data.node_lowerBound,\r\n                relationVec: data.relation_vectors,\r\n                extVec: data.ext_vectors\r\n            });\r\n            this.props.updateConvexHull(this.state.extVec);\r\n            this.setUtilityVec(this.state.extVec);\r\n            this.drawGraph();\r\n        });\r\n\r\n        this.socket.on('send_integer', (data) => {\r\n            this.setState({\r\n                pair: [data.pair1, data.pair2],\r\n                nodeVec: data.node_vectors,\r\n                upper: data.node_upperBound,\r\n                lower: data.node_lowerBound,\r\n                relationVec: data.relation_vectors,\r\n                extVec: data.ext_vectors\r\n            });\r\n            this.props.updateConvexHull(this.state.extVec);\r\n            console.log(this.state.extVec);\r\n            let raArry = this.props.radius;\r\n            raArry.push(this.findMaxDistance(this.state.extVec).toFixed(6));\r\n            this.props.setRadius(raArry);\r\n            console.log(this.props.radius);\r\n            this.setUtilityVec(this.state.extVec);\r\n            let indexes = data.leftpoints;\r\n            const pruneIndexes = prevLeftPoints.filter(point => !indexes.includes(point));\r\n            prevLeftPoints = indexes;\r\n            this.props.prunePoints(pruneIndexes, numOfQuestion);\r\n            if(data.pair1 === data.pair2)\r\n            {\r\n                this.socket.disconnect();\r\n                this.props.showResult();\r\n            }\r\n            else\r\n                this.drawGraph();\r\n        });\r\n\r\n        // Example: initialize immediately after setting up the socket\r\n        this.initialize();\r\n\r\n    }\r\n\r\n\r\n    toggleShowMoreGraph = () => {\r\n        this.setState(prevState => ({\r\n            showMoreGraph: !prevState.showMoreGraph\r\n        }));\r\n    };\r\n\r\n    toggleShowMoreRange = () => {\r\n        this.setState(prevState => ({\r\n            showMoreRange: !prevState.showMoreRange\r\n        }));\r\n    };\r\n\r\n    calculateDistance(point1, point2) {\r\n        return Math.sqrt(Math.pow(point2[0] - point1[0], 2) + Math.pow(point2[1] - point1[1], 2));\r\n    }\r\n\r\n    findMaxDistance(points) {\r\n        let maxDistance = 0;\r\n\r\n        for (let i = 0; i < points.length; i++) {\r\n            for (let j = i + 1; j < points.length; j++) {\r\n                const distance = this.calculateDistance(points[i], points[j]);\r\n                maxDistance = Math.max(maxDistance, distance);\r\n            }\r\n        }\r\n        return maxDistance;\r\n    }\r\n\r\n    // Emit 'initialize' event to the server\r\n    initialize() {\r\n        let smallerBetter = [];\r\n        this.props.attributes.slice(3).map(([attr, config]) => {\r\n            if(this.props.mask[attr])\r\n                smallerBetter.push(config.smallerBetter ? 1 : 0);\r\n        })\r\n        console.log(smallerBetter);\r\n        const normCandidate  = normalized(this.props.candidates, smallerBetter);\r\n        console.log(normCandidate);\r\n        this.socket.emit('initialize', {\r\n            array: normCandidate,\r\n            int1: this.props.candidates.length,\r\n            int2: dcat,\r\n            int3: dnum\r\n        });\r\n    }\r\n\r\n\r\n    startAgain = () =>\r\n    {\r\n        this.socket.disconnect();\r\n        this.props.restartedAgain();\r\n    }\r\n\r\n    drawGraph() {\r\n        const svg = d3.select(this.ref.current);\r\n\r\n        svg.selectAll(\"*\").remove();\r\n        console.log(this.state.relationVec);\r\n\r\n        const x = this.state.nodeVec.length;  // large nodes count\r\n        const radius = 250; // radius of the circle on which nodes are positioned\r\n        const center = { x: 300, y: 270 };  // center of the SVG and circle\r\n\r\n        const largeNodeWidth = 30;\r\n        const largeNodeHeight = 30;\r\n\r\n        console.log(this.state.upper);\r\n        console.log(this.state.lower);\r\n\r\n\r\n        let upperForRec = [], lowerForRec = [];\r\n        for(let i = 0; i < this.state.upper.length; ++i) //for each node\r\n        {\r\n            let bound = 999999;\r\n            for(let j = 0; j < this.state.upper[i].length; ++j)//for each bound\r\n            {\r\n                //calculate the bound\r\n                let bb = 0;\r\n                for(let d = 0; d < this.state.numUtilityVec.length; ++d)\r\n                    bb += this.state.numUtilityVec[d] * this.state.upper[i][j][d];\r\n                if(bb < bound)\r\n                    bound = bb.toFixed(6);\r\n            }\r\n            upperForRec.push(bound);\r\n        }\r\n        for(let i = 0; i < this.state.lower.length; ++i) //for each node\r\n        {\r\n            let bound = -999999;\r\n            for(let j = 0; j < this.state.lower[i].length; ++j)//for each bound\r\n            {\r\n                //calculate the bound\r\n                let bb = 0;\r\n                for(let d = 0; d < this.state.numUtilityVec.length; ++d)\r\n                    bb += this.state.numUtilityVec[d] * this.state.lower[i][j][d];\r\n                if(bb > bound)\r\n                    bound = bb.toFixed(6);\r\n            }\r\n            lowerForRec.push(bound);\r\n        }\r\n\r\n        const getCirclePosition = (center, angle, r) => {\r\n            return {\r\n                x: center.x + r * Math.cos(angle),\r\n                y: center.y + r * Math.sin(angle)\r\n            };\r\n        }\r\n\r\n        svg.append(\"text\")\r\n            .attr(\"x\", 950)  // Adjust x value to fit your SVG width.\r\n            .attr(\"y\", 150)   // Adjust y value to fit your SVG height.\r\n            .attr(\"text-anchor\", \"end\")  // Right align text.\r\n            .style(\"font-size\", \"15px\")  // Font size of the text.\r\n            .text(\"Put your mouse on the node to see its information.\");\r\n\r\n        // Draw a rectangle in the center of the SVG.\r\n        const rectangleWidth = 270;\r\n        const rectangleHeight = 180;\r\n        svg.append(\"rect\")\r\n            .attr(\"x\", 780 - rectangleWidth/2)\r\n            .attr(\"y\", center.y - rectangleHeight/2 + 10)\r\n            .attr(\"width\", rectangleWidth)\r\n            .attr(\"height\", rectangleHeight)\r\n            .attr(\"fill\", \"#FEFFFE\")\r\n            .attr(\"stroke\", \"#ccc\")\r\n            .attr(\"stroke-width\", 2);\r\n\r\n        // Add \"Node Information\" text in the upper half of the rectangle.\r\n        svg.append(\"text\")\r\n            .attr(\"x\", 780)\r\n            .attr(\"y\", center.y - rectangleHeight/4)  // Adjust y value to place the text in the upper half of the rectangle.\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .style(\"font-size\", \"20px\")\r\n            .text(\"Node Information\");\r\n\r\n        const largeRectNodes = Array.from({ length: x }).map((_, i) => {\r\n            const angle = (2 * Math.PI / x) * i;  // equally spaced on the circle\r\n            const position = getCirclePosition(center, angle, radius);\r\n\r\n            const firstHalf = this.state.nodeVec[i].slice(0, this.state.nodeVec[i].length/2).join(\", \");\r\n            const secondHalf = this.state.nodeVec[i].slice(this.state.nodeVec[i].length/2).join(\", \");\r\n            let upshow, lwshow;\r\n            if(upperForRec[i] === 999999) upshow = \"unknown\";\r\n            else upshow = upperForRec[i];\r\n            if(lowerForRec[i] === -999999) lwshow = \"unknown\";\r\n            else lwshow = lowerForRec[i];\r\n            return {\r\n                x: position.x - largeNodeWidth / 2,  // center the rectangle on the calculated position\r\n                y: position.y - largeNodeHeight / 2,\r\n                label1: firstHalf,\r\n                label2: secondHalf,\r\n                up: upshow,\r\n                lw: lwshow\r\n            };\r\n        });\r\n\r\n        const getLineEndpoints = (node1, node2, width, height) => {\r\n            return {\r\n                x1: node1.x + width / 2,\r\n                y1: node1.y + height / 2,\r\n                x2: node2.x + width / 2,\r\n                y2: node2.y + height / 2\r\n            };\r\n        };\r\n\r\n        this.state.relationVec.forEach((relation) => {\r\n            const points = getLineEndpoints(largeRectNodes[relation[0]], largeRectNodes[relation[1]], largeNodeWidth, largeNodeHeight);\r\n            svg.append(\"line\")\r\n                .attr(\"x1\", points.x1)\r\n                .attr(\"y1\", points.y1)\r\n                .attr(\"x2\", points.x2)\r\n                .attr(\"y2\", points.y2)\r\n                .attr(\"stroke\", \"#ccc\")\r\n                .attr(\"stroke-width\", 1);\r\n        });\r\n\r\n        const showLabel = (d, show) => {\r\n            if (show) {\r\n                const textElement = svg.append(\"text\")\r\n                    .attr(\"class\", \"tempLabel\")\r\n                    .attr(\"x\", 660)\r\n                    .attr(\"y\", 110)\r\n                    .attr(\"text-anchor\", \"left\")\r\n                    .style(\"font-size\", \"15px\")\r\n\r\n                // First line\r\n                textElement.append(\"tspan\")\r\n                    .text(\"CV1 = {\" + d.label2 + \"}\")\r\n                    .attr(\"x\", 660)  // reset x to keep text centered\r\n                    .attr(\"dy\", \"10em\");  // use 'dy' to adjust the y position for each line\r\n\r\n                // Second line\r\n                textElement.append(\"tspan\")\r\n                    .text(\"CV2 = {\" + d.label1 + \"}\")\r\n                    .attr(\"x\", 660)  // reset x to keep text centered\r\n                    .attr(\"dy\", \"1.2em\");  // use 'dy' to adjust the y position for each line\r\n\r\n                // Third line\r\n                textElement.append(\"tspan\")\r\n                    .text(\"S1: Score(\" + d.label2 + \")\")\r\n                    .attr(\"x\", 660)  // reset x to keep text centered\r\n                    .attr(\"dy\", \"1.2em\");  // use 'dy' to adjust the y position for each line\r\n\r\n                // Fourth line\r\n                textElement.append(\"tspan\")\r\n                    .text(\"S2: Score(\" + d.label1 + \")\")\r\n                    .attr(\"x\", 660)  // reset x to keep text centered\r\n                    .attr(\"dy\", \"1.2em\");  // use 'dy' to adjust the y position for each line\r\n\r\n                // Fifth line\r\n                textElement.append(\"tspan\")\r\n                    .text(\"Upper Bound of S1 - S2: \" + d.up)\r\n                    .attr(\"x\", 660)\r\n                    .attr(\"dy\", \"1.2em\");  // '1.2em' will position this line 1.2 times the font-size below the previous line\r\n\r\n                // Sixth line\r\n                textElement.append(\"tspan\")\r\n                    .text(\"Lower Bound of S1 - S2: \" + d.lw)\r\n                    .attr(\"x\", 660)\r\n                    .attr(\"dy\", \"1.2em\");  // '1.2em' will position this line 1.2 times the font-size below the previous line\r\n\r\n            } else {\r\n                svg.selectAll(\".tempLabel, .tempLabelBg\").remove();\r\n            }\r\n        }\r\n\r\n        const relationVecTP = this.state.relationVec;\r\n\r\n        let largeRects = [];\r\n        largeRectNodes.forEach((node, idx) => {\r\n            const largeRect = svg.append(\"rect\")\r\n                .attr(\"x\", node.x)\r\n                .attr(\"y\", node.y)\r\n                .attr(\"width\", largeNodeWidth)\r\n                .attr(\"height\", largeNodeHeight)\r\n                .attr(\"data-id\", idx)\r\n                .attr(\"fill\", \"#FEFFFE\")\r\n                .attr(\"stroke\", \"#ccc\")\r\n                .attr(\"stroke-width\", 2)\r\n                .on(\"mouseover\", function () {\r\n                    d3.select(this).attr(\"fill\", \"#C8D0F8\");\r\n                    showLabel(node, true);\r\n\r\n                    // Highlight connected nodes\r\n                    const connectedNodes = relationVecTP\r\n                        .filter(rel => rel.includes(idx))\r\n                        .flat()\r\n                        .filter(i => i !== idx);\r\n\r\n                    connectedNodes.forEach(j => {\r\n                        largeRects[j].attr(\"fill\", \"#c8e4f8\");\r\n                    });\r\n\r\n                    // Highlight connected lines\r\n                    relationVecTP.forEach((relation) => {\r\n                        if (relation.includes(idx)) {\r\n                            const points = getLineEndpoints(largeRectNodes[relation[0]], largeRectNodes[relation[1]], largeNodeWidth, largeNodeHeight);\r\n                            svg.select(`line[x1=\"${points.x1}\"][y1=\"${points.y1}\"][x2=\"${points.x2}\"][y2=\"${points.y2}\"]`)\r\n                                .attr(\"stroke\", \"#94a0b4\")\r\n                                .attr(\"stroke-width\", 1.5);\r\n                        }\r\n                    });\r\n                })\r\n                .on(\"mouseout\", function () {\r\n                    d3.select(this).attr(\"fill\", \"#FEFFFE\");\r\n                    showLabel(node, false);\r\n\r\n                    // Reset color of connected nodes\r\n                    const connectedNodes = relationVecTP\r\n                        .filter(rel => rel.includes(idx))\r\n                        .flat()\r\n                        .filter(i => i !== idx);\r\n\r\n                    connectedNodes.forEach(j => {\r\n                        largeRects[j].attr(\"fill\", \"#FEFFFE\");\r\n                    });\r\n\r\n                    // Reset color of connected lines\r\n                    relationVecTP.forEach((relation) => {\r\n                        if (relation.includes(idx)) {\r\n                            const points = getLineEndpoints(largeRectNodes[relation[0]], largeRectNodes[relation[1]], largeNodeWidth, largeNodeHeight);\r\n                            svg.select(`line[x1=\"${points.x1}\"][y1=\"${points.y1}\"][x2=\"${points.x2}\"][y2=\"${points.y2}\"]`)\r\n                                .attr(\"stroke\", \"#ccc\")\r\n                                .attr(\"stroke-width\", 1);\r\n                        }\r\n                    });\r\n\r\n                });\r\n            largeRects.push(largeRect);\r\n        });\r\n\r\n        const bbox = svg.node().getBBox();\r\n        svg.attr(\"viewBox\", \"0 0 1000 560\");\r\n        //svg.attr(\"viewBox\", `${bbox.x - 50} ${bbox.y - 50} ${bbox.width + 100} ${bbox.height + 100}`);\r\n    }\r\n\r\n    choose = (choice) => {\r\n        numOfQuestion++;\r\n        this.socket.emit('send_integer', {\r\n            integer: choice\r\n        });\r\n    }\r\n\r\n    generateRandomNumbers = (x) => {\r\n        let numbers = [0];\r\n\r\n        // Generate x - 1 random numbers\r\n        for (let i = 0; i < x - 1; i++) {\r\n            numbers.push(Math.random());\r\n        }\r\n\r\n        numbers.push(1);\r\n        numbers.sort((a, b) => a - b);\r\n\r\n        let result = [];\r\n\r\n        for (let i = 1; i < numbers.length; i++) {\r\n            result.push(numbers[i] - numbers[i - 1]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n    setUtilityVec = (Vec) =>\r\n    {\r\n        const coff = this.generateRandomNumbers(Vec.length);\r\n        let resultU = [];\r\n        let sum = 0\r\n        for(let i = 0; i < dnum - 1; ++i)\r\n        {\r\n            let coord = 0\r\n            for(let j = 0; j < Vec.length; ++j)\r\n                coord += coff[j] * Vec[j][i];\r\n            sum += coord;\r\n            resultU.push(coord);\r\n        }\r\n        resultU.push(1 - sum);\r\n        this.setState({\r\n            numUtilityVec: resultU\r\n        });\r\n    }\r\n\r\n    regenerateUtilityVec = () =>\r\n    {\r\n        this.setUtilityVec(this.state.extVec);\r\n        this.drawGraph();\r\n    }\r\n\r\n    componentDidMount() {\r\n        const container = document.querySelector('.scrollable-container');\r\n        container.scrollLeft = (container.scrollWidth - container.clientWidth) / 2;\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        let ths = null, trs = null;\r\n        ths = [<th key=\"Option No.\">Option</th>];\r\n        attrData.forEach(attr => {\r\n            ths.push(<th key={attr.id}>{attr.name}</th>);\r\n        });\r\n        ths.push(<th key=\"chooseButton\"/>);\r\n\r\n        trs = this.state.pair.map((idx, i) => {\r\n                const tds = [<td key=\"Option No.\">{i + 1}</td>];\r\n                this.props.candidates[idx].forEach((x, j) => {\r\n                    tds.push(<td key={j}>{x}</td>);\r\n                });\r\n\r\n                tds.push(\r\n                    <td key=\"chooseButton\">\r\n                        <button type=\"button\"\r\n                                className=\"choose-btn\"\r\n                                style={{ width: \"6rem\", height: \"1.5rem\" }}\r\n                                onClick={() => this.choose(i)}>\r\n                            Choose\r\n                        </button>\r\n                    </td>\r\n                );\r\n\r\n                return (\r\n                    <tr key={i} data-toggle=\"tooltip\">\r\n                        {tds}\r\n                    </tr>\r\n                );\r\n            }\r\n        );\r\n\r\n        let vecForTable = [];\r\n        if(this.state.numUtilityVec.length > 0) {\r\n            const vvvvv = this.state.numUtilityVec;\r\n            console.log(vvvvv);\r\n            attrData.slice(dcat).map((attr, i) => {\r\n                const ele = vvvvv[i].toFixed(2);\r\n                vecForTable.push(\r\n                    <tr>\r\n                        <th key={attr.id}>{attr.name}</th>\r\n                        <th key={attr.id}>{ele}</th>\r\n                    </tr>\r\n                );\r\n            });\r\n        }\r\n\r\n        const { showMoreGraph, showMoreRange } = this.state;\r\n\r\n        const moreTextGraph = \"The following shows a node information template. \\n\" +\r\n            \"Suppose that Tuple 1 has value 'C1' on attribute A and value 'D1' on attribute B. \\n\" +\r\n            \"Suppose that Tuple 2 has value 'C2' on attribute A and value 'D2' on attribute B. \\n\" +\r\n            \"We define: \\n\" +\r\n            \"CV1 = {C1, D1}. \\n\" +\r\n            \"CV2 = {C2, D2}. \\n\" +\r\n            \"S1 = the score of value 'C1' on attribute A + the score of value 'D1' on attribute B, i.e., Score(CV1). \\n\"+\r\n            \"S2 = the score of value 'C2' on attribute A + the score of value 'D2' on attribute B, i.e., Score(CV2). \\n\\n\"+\r\n            \"S1 - S2 indicates to what extend you prefer CV1 to CV2. \\n\" +\r\n            \"If S1 - S2 is positive, you prefer CV1 to CV2 (a larger value means larger extend). \\n\" +\r\n            \"If S1 - S2 is negative, you prefer CV1 to CV2 (a smaller value means smaller extend).\";\r\n\r\n\r\n\r\n        const moreTextRange = \"The weights in the utility vector indicate the importance of numerical attributes to you.\";\r\n\r\n        return (\r\n            <div className=\"text-center m-auto\" style={{}}>\r\n                <img alt='' src={TitleGraph} style={{ 'width': '100%' }} />\r\n                <p style={{ 'background': 'gainsboro', 'borderRadius': '5px', 'padding': '10px',\r\n                    'fontSize': '16px', 'textAlign': 'left'}}>\r\n                    <span style={{ 'fontSize': '20px'}}><strong>Instruction:</strong></span> You will be asked with\r\n                    multiple questions so that we can learn your preference on tuples, and then, find your favorite one. There are three parts in the following.\r\n                    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Part 1:</em> It interacts with you by asking questions.\r\n                    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Part 2:</em> It shows the middle results of algorithm GE-Graph.\r\n                    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Part 3:</em> It shows the statistic of the performance of algorithm GE-Graph.\r\n                </p>\r\n                <br/>\r\n                <h4 style={{\r\n                    'background': 'linear-gradient(to right, #89bfe9, #5271a6)', // 添加从左到右的颜色渐变\r\n                    'borderRadius': '5px',\r\n                    'textAlign': 'left',\r\n                    'padding': '5px',\r\n                    'boxShadow': '3px 3px 5px rgba(0, 0, 0, 0.5)'  // 添加稍微的阴影效果\r\n                }}>\r\n                    <strong><em>&nbsp;PART 1:</em></strong> Interaction\r\n                </h4>\r\n                <p style={{ 'background': 'gainsboro', 'borderRadius': '5px', 'padding': '5px',\r\n                    'fontSize': '16px', 'textAlign': 'left'}}>\r\n                    <strong>&nbsp;NOTE: </strong>Choose the Tuple you favor more between the following options\r\n                </p>\r\n                <div className=\"row justify-content-center align-items-center\">\r\n                    <div className=\"col-md-8\">\r\n                        <table className=\"table table-hover text-center\">\r\n                            <thead>\r\n                            <tr>{ths}</tr>\r\n                            </thead>\r\n                            <tbody>{trs}</tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n                <h4 style={{\r\n                    'background': 'linear-gradient(to right, #89bfe9, #5271a6)', // 添加从左到右的颜色渐变\r\n                    'borderRadius': '5px',\r\n                    'textAlign': 'left',\r\n                    'padding': '5px',\r\n                    'boxShadow': '3px 3px 5px rgba(0, 0, 0, 0.5)'  // 添加稍微的阴影效果\r\n                }}>\r\n                    <strong><em>&nbsp;PART 2:</em></strong> Visuals\r\n                </h4>\r\n                <p style={{ 'background': 'gainsboro', 'borderRadius': '5px', 'padding': '10px',\r\n                    'fontSize': '16px', 'textAlign': 'left'}}>\r\n                    <strong>NOTE: </strong>Here shows the relational graph and the numerical utility range. The relational\r\n                    graph stores the information of your preference on the categorical attributes. The numerical utility range\r\n                    stores the information of your preference on the numerical attributes.\r\n                </p>\r\n\r\n\r\n                <div className=\"justify-content-center\">\r\n                    <div style={{width: '100%', height: '500px', overflow: 'auto', background: '#F6F6F6'}}>\r\n                        <svg ref={this.ref}></svg>\r\n                    </div>\r\n                    <div>\r\n                    <h4 style={{'padding': '10px'}}>Relational Graph</h4>\r\n                    <p className=\"preserve-newlines\">\r\n                        Each node in the relational graph stores your preference on some\r\n                        categorical values. {showMoreGraph ? moreTextGraph : ' '}\r\n                        <button className=\"toggleButton\" onClick={this.toggleShowMoreGraph}>\r\n                            {showMoreGraph ? <span className=\"foldText\">&nbsp;fold</span> : <span className=\"foldText\">...unfold</span>}\r\n                        </button>\r\n                    </p>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"scrollable2-container\">\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                    <div className=\"row justify-content-center\" style={{width: '40rem' }}>\r\n                        <PreferenceSpace />\r\n                        <div>\r\n                        <h4 style={{'padding': '10px'}}>Numerical Utility Range</h4>\r\n                        <p className=\"text-t-align\">\r\n                            &nbsp;&nbsp;&nbsp;&nbsp; The numerical utility range is the possible domain of your utility\r\n                            vector. {showMoreRange ? moreTextRange: ' '}\r\n                            <button className=\"toggleButton\" onClick={this.toggleShowMoreRange}>\r\n                                {showMoreRange ? <span className=\"foldText\">&nbsp;fold</span> : <span className=\"foldText\">...unfold</span>}\r\n                            </button>\r\n                        </p>\r\n                        </div>\r\n                    </div>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    <div className=\"row justify-content-center\">\r\n                        <div style={{ width: \"22rem\" }}>\r\n                            <div>\r\n                                <h4><strong>Numerical Utility Vector</strong></h4>\r\n                            </div>\r\n                            <div>\r\n                                <h4 style={{\r\n                                    fontFamily: \"'Arial', sans-serif\",  // Use any preferred font.\r\n                                    color: '#0cc0df',  // Text color.\r\n                                    backgroundColor: '#f5f5f5',  // Background color.\r\n                                    padding: '10px',  // Padding around text.\r\n                                    border: '2px solid #0cc0df',  // Border around text.\r\n                                    borderRadius: '5px',  // Rounded corners.\r\n                                    display: 'inline-block',  // To make the background color only wrap the text.\r\n                                    boxShadow: '3px 3px 5px rgba(0, 0, 0, 0.2)'  // A subtle shadow.\r\n                                }}>({this.state.numUtilityVec.map(num => num.toFixed(2)).join(\", \")})</h4>\r\n                            </div>\r\n\r\n                            <table className=\"table table-hover text-center\">\r\n                                <tbody>{vecForTable}</tbody>\r\n                            </table>\r\n\r\n                            <div>\r\n                            <button type=\"button\"\r\n                            className=\"modern-btn\"\r\n                            style={{ height: \"3rem\", width: \"12rem\" }}\r\n                            onClick={this.regenerateUtilityVec}>\r\n                                Randomly Generate\r\n                            </button>\r\n                            </div>\r\n                            <p className=\"text-t-align\" style={{ 'padding': '10px',\r\n                                'fontSize': '16px', 'textAlign': 'left', width: \"22rem\"}}>\r\n                                Click the button to randomly generate another utility vector in the numerical\r\n                                utility range. The bounds in the relational graph will be updated based on the\r\n                                generated utility vector.\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n\r\n                <br />\r\n                <h4 style={{\r\n                    'background': 'linear-gradient(to right, #89bfe9, #5271a6)', // 添加从左到右的颜色渐变\r\n                    'borderRadius': '5px',\r\n                    'textAlign': 'left',\r\n                    'padding': '5px',\r\n                    'boxShadow': '3px 3px 5px rgba(0, 0, 0, 0.5)'  // 添加稍微的阴影效果\r\n                }}>\r\n                    <strong><em>&nbsp;PART 3:</em></strong> Statistics\r\n                </h4>\r\n                <p style={{ 'background': 'gainsboro', 'borderRadius': '5px', 'padding': '10px',\r\n                    'fontSize': '16px', 'textAlign': 'left'}}>\r\n                    <strong>NOTE: </strong>Here shows two figures and two tables that demonstrate the Diameter of the\r\n                    numerical utility range, the Candidate Tuple, and the Tuples pruned during the interaction process.\r\n                </p>\r\n                <br/>\r\n                <div>\r\n                    <div className=\"row justify-content-center\" >\r\n                        <div className=\"col-md-auto\">\r\n                            <HistogramForR />\r\n                        </div>\r\n                        <div className=\"col-md-auto\">\r\n                            <Histogram />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <br />\r\n                <p style={{ 'background': 'gainsboro', 'borderRadius': '5px', 'padding': '10px',\r\n                    'fontSize': '16px', 'textAlign': 'left'}}>\r\n                    &nbsp;\r\n                </p>\r\n                <br />\r\n                <div className=\"scrollable-container\">\r\n                <div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div>\r\n                            <Stats />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n\r\n                <br />\r\n                <div>\r\n                    <button type=\"button\"\r\n                            className=\"modern-btn\"\r\n                            style={{ width: \"12rem\" }}\r\n                            onClick={this.startAgain}>\r\n                        Return to Home\r\n                    </button>\r\n                </div>\r\n                <br />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ candidates, attributes, mask, points, mode, radius, selectedDataset }) => ({\r\n    attributes,\r\n    mask,\r\n    points,\r\n    mode,\r\n    candidates,\r\n    radius,\r\n    selectedDataset\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    showResult: () => {\r\n        dispatch(setActiveComponent(\"ResultGraph\"));\r\n    },\r\n    setLeftPoints: indices => {\r\n        dispatch(setLeftPoints(indices));\r\n    },\r\n    setRadius: radius => {\r\n        dispatch(setRadius(radius));\r\n    },\r\n    restartedAgain: () => {\r\n        dispatch(setActiveComponent(\"Welcome\"));\r\n        dispatch(restart());\r\n    },\r\n    prunePoints: (indices, step) => {\r\n        dispatch(prunePoints(indices, step));\r\n    },\r\n    updateConvexHull: vertices => {\r\n        dispatch(updateConvexHull(vertices));\r\n    }\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(GEGraph);\r\n","import React from \"react\";\nimport {\n    setActiveComponent,\n    setCandidates,\n    toggleMask,\n    changeMode\n} from \"../actions\";\nimport { connect } from \"react-redux\";\nimport { selectCandidates } from \"../utils\";\n\n\n\n// the welcome scene containing a brief introduction and a table to obtain the user's input\nclass End extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"text-center m-auto\" style={{ maxWidth: \"50rem\" }}>\n                <h1>Thanks for Your Participation!</h1>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({ attributes, mask, points, mode }) => ({\n    attributes,\n    mask,\n    points,\n    mode\n});\n\nconst mapDispatchToProps = dispatch => ({\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(End);\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport classNames from \"classnames\";\r\nimport { setActiveComponent, restart } from \"../actions\";\r\nimport Histogram from \"./Histogram\";\r\nimport HistogramForR from \"./HistogramForR\"\r\n\r\n// show the number of questions asked and the favourite car/remaining cars.\r\nfunction ResultGraph({candidates, leftPoints, attributes, mask, numLeftPoints, restart})\r\n{\r\n  let ths = [];\r\n  attributes.forEach(([attr, config]) => {\r\n    if (mask[attr]) {\r\n      const th = <th key={attr}>{attr}</th>;\r\n      ths.push(th);\r\n    }\r\n  });\r\n  const trs = leftPoints.map((idx, i) => (\r\n      <tr key={i} data-toggle=\"tooltip\">\r\n        {candidates[idx].map((x, j) => {return <td key={j}>{x}</td>})}\r\n      </tr>\r\n  ));\r\n  return (\r\n      <div className=\"justify-content-center\">\r\n        <h4>The Total No. of Questions Asked is: {numLeftPoints.length - 1}.</h4>\r\n        <h4>\r\n          {leftPoints.length === 1\r\n              ? \"Your Favourite Tuple is:\"\r\n              : `${leftPoints.length} Tuples Left in the Database:`}\r\n        </h4>\r\n        <table\r\n            className={classNames(\"table\", \"table-hover\", {\r\n              \"table-fixed\": trs.length > 7\r\n            })}\r\n            style={{\r\n              maxWidth: \"40rem\",\r\n              margin: \"auto\"\r\n            }}\r\n        >\r\n          <thead>\r\n          <tr>{ths}</tr>\r\n          </thead>\r\n          <tbody>{trs}</tbody>\r\n        </table>\r\n          <div>\r\n              <div className=\"row justify-content-center\" >\r\n                  <div className=\"col-md-auto\">\r\n                      <HistogramForR />\r\n                  </div>\r\n                  <div className=\"col-md-auto\">\r\n                      <Histogram />\r\n                  </div>\r\n              </div>\r\n          </div>\r\n        <div>\r\n            <button type=\"button\"\r\n                    className=\"modern-btn\"\r\n                    style={{ width: \"12rem\" }}\r\n                    onClick={restart}>\r\n            Return to Home\r\n          </button>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({candidates, leftPoints, attributes, mask, numLeftPoints}) => ({\r\n  candidates,\r\n  leftPoints,\r\n  attributes,\r\n  mask,\r\n  numLeftPoints\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  restart: () => {\r\n    dispatch(setActiveComponent(\"Welcome\"));\r\n    dispatch(restart());\r\n  }\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ResultGraph);","import React from \"react\";\nimport {\n  setActiveComponent,\n  setCandidates,\n  toggleMask,\n  changeMode,\n  changeK,\n  setDataset\n} from \"../actions\";\nimport { connect } from \"react-redux\";\nimport {\n  selectCandidates,\n  selectCatonlyCandidates,\n  getRanges,\n  getSkyline,\n  loadCarDataset\n} from \"../utils\";\nimport imgFavorite from '../imgs/favorite.png';\nimport MainTitle from '../imgs/MainTitle.png';\nimport SelectCatAttr from '../imgs/SelectCatAttr.png'\nimport '../css/welcome.css';\nimport {config} from \"@fortawesome/fontawesome-svg-core\";\n\n// the welcome scene containing a brief introduction and a table to obtain the user's input\nclass CarWelcome extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedAlgorithm: \"sptree\",\n      points1: null\n    };\n  }\n\n  async componentDidMount() {\n    const points1 = await loadCarDataset(\"./datasets/car.txt\");\n    const attributes = [\n      [\"Type\"],\n      [\"Power\"],\n      [\"Transmission\"],\n      [\"Price (USD)\", { low: 1000, high: 50000, smallerBetter: true }],\n      [\"Year\", { low: 2001, high: 2017, smallerBetter: false }],\n      [\"Power (HP)\", { low: 50, high: 400, smallerBetter: false }],\n      [\"Used KM\", { low: 10000, high: 150000, smallerBetter: true }]\n    ];\n    const mask = {};\n    attributes.slice(0, 3).forEach(([attr]) => {mask[attr] = 1;});\n    attributes.slice(3).forEach(([attr, config]) => {mask[attr] = 0;});\n    this.props.setDataset(points1, mask, attributes);\n    this.props.changeMode(\"sptree\");\n    console.log(this.props.mode);\n    this.setState({ points1 });\n  }\n\n  handleStart = () => {\n    let ranges = [], mask = [], maxPoints;\n    for (let i = 0; i < this.props.attributes.length; ++i)\n    {\n        const [attr, config] = this.props.attributes[i];\n        mask.push(this.props.mask[attr]);\n    }\n    for (let i = 0; i < this.props.attributes.slice(3).length; ++i)\n    {\n      const [attr, config] = this.props.attributes.slice(3)[i];\n      const range = [config.low, config.high];\n      if (this.props.mask[attr])\n      {\n        for (let j = 0; j < 2; ++j)\n        {\n          const str = this.inputs[attr][j].current.value.trim();\n          if (str === \"\") continue;\n          else if (isNaN(str))\n          {\n            alert(`${str} in range of ${attr} is not an integer`);\n            return;\n          }\n          else {\n            range[j] = parseFloat(str);\n          }\n        }\n      }\n      ranges.push(range);\n    }\n    const str = this.inputs.maxPoints.current.value.trim();\n    console.log('input number', str);\n    if (str === \"\") maxPoints = 1000;\n    else if (/\\d+/.test(str)) maxPoints = parseInt(str);\n    else {\n      alert(`${str} for Maximum items is not an integer`);\n      return;\n    }\n    if (maxPoints > 40000 || maxPoints < 100)\n      return alert('The input is out of the range, please input a number between 1000 ~ 40000');\n\n    console.log('ranges', ranges);\n    console.log('mask', mask);\n    console.log('maxPoints', maxPoints);\n\n    if(['gegraph'].includes(this.props.mode))\n    {\n      const candidates = selectCandidates(\n          this.props.points,\n          ranges,\n          mask,\n          maxPoints\n      );\n      if (candidates.length === 0) {\n        alert(\"No matching Tuples, try larger ranges\");\n        return;\n      }\n\n      console.log('attr', this.props.attributes);\n      let isSelected = this.props.attributes.map(([attr, config]) => {\n        return this.props.mask[attr];\n      })\n      let smallerBetter = this.props.attributes.slice(3).map(([attr, config]) => {\n        return config.smallerBetter ? 1 : 0;\n      })\n      console.log('input points--', candidates, isSelected, smallerBetter);\n\n      //console.log('input points--', candidates, isSelected, smallerBetter);\n\n      let skyline = getSkyline(candidates, smallerBetter, isSelected)\n      if (skyline.length < 10)\n      {\n        console.log('skyline', skyline);\n        return alert('Too few valid tuples! Try more attributes, looser ranges, larger Max No. of Tuples or larger datasets!')\n      }\n\n      /*\n      if (Object.values(this.props.mask).slice(0, 3).filter((i) => i === 1).length > 2) {\n        return alert('SPTree only supports two categorical attributes!');\n      }\n      */\n\n      console.log('skyline', skyline);\n      this.props.startAlgorithmGEGraph(skyline);\n\n    }\n    else\n    {\n      if (Object.values(this.props.mask).slice(0, 3).filter((i) => i === 1).length < 1) {\n        return alert('You need to select at least one categorical attribute!');\n      }\n      const candidates = selectCatonlyCandidates (this.props.points, mask);\n      this.props.startAlgorithmSPTree(candidates);\n    }\n  };\n\n  handleChange = event => {\n    if (['gegraph'].includes(event.target.value))\n    {\n      if (Object.values(this.props.mask).slice(0, 3).filter((i) => i === 1).length > 2)\n      {\n        alert(event.target.value + ' only supports two categorical attributes!');\n        this.setState({ selectedAlgorithm: 'sptree' });\n        return\n      }\n      this.props.attributes.slice(3).map(([attr, config]) => {\n        this.props.toggleMask(attr, 1);\n      });\n    }\n    else if (['sptree'].includes(event.target.value))\n    {\n      this.props.attributes.slice(3).map(([attr, config]) => {\n        this.props.toggleMask(attr, 0);\n      });\n    }\n\n    this.setState({ selectedAlgorithm: event.target.value });\n    this.props.changeMode(event.target.value);\n\n  };\n\n  isCatAble = (abled, attr) =>\n  {\n    if(abled === 1) {\n      if (Object.values(this.props.mask).slice(0, 3).filter((i) => i === 1).length <= 1)\n      {\n        return alert('You need to select at least one categorical attribute!');\n      }\n      else\n        this.props.toggleMask(attr, 1 - this.props.mask[attr]);\n    }\n    else {\n       if (this.props.mode === 'gegraph' && Object.values(this.props.mask).slice(0, 3).filter((i) => i === 1).length >= 2)\n       {\n        return alert('You can only select at most two categorical attributes!');\n       }\n       else\n         this.props.toggleMask(attr, 1 - this.props.mask[attr]);\n    }\n  }\n\n  isNumAble = (abled, attr) =>\n  {\n    if(abled === 1) {\n      if (Object.values(this.props.mask).slice(3).filter((i) => i === 1).length <= 3)\n      {\n        return alert('You need to select at least three numerical attributes!');\n      }\n      else\n        this.props.toggleMask(attr, 1 - this.props.mask[attr]);\n    }\n    else\n      this.props.toggleMask(attr, 1 - this.props.mask[attr]);\n  }\n\n  render() {\n\n    if (this.state.points1 === null) {\n      return <div>Loading...</div>;\n    }\n\n    // Init inputs\n    this.inputs = {};\n    this.props.attributes.slice(3).forEach(([attr, config]) => {\n      this.inputs[attr] = [React.createRef(), React.createRef()];\n    });\n    this.inputs.maxPoints = React.createRef();\n\n\n    const categoricalValues =[[\"Kleinwagen\", \"Limousine\", \"Kombi\"],\n      [\"Lpg\", \"Diesel\", \"Cng\", \"Benzin\"], [\"Auto\", \"Manual\"]];\n    // Iterate categorical attributes\n    const catAttrs = this.props.attributes.slice(0, 3).map((attr, index) => {\n      const abled = this.props.mask[attr];\n      return (\n          <tr key={attr}>\n            <td className=\"align-middle\">\n              <span className={`${this.props.mask[attr] ? \"attribute-select\" : null}`}\n                    style={{'textDecoration': this.props.mask[attr] ? '' : 'line-through' }}\n              >{attr}</span>\n            </td>\n            <td>\n              <span style={{'textDecoration': this.props.mask[attr] ? '' : 'line-through' }}\n              >{categoricalValues[index].join(', ')}</span>\n            </td>\n            <td className=\"align-middle\">\n              <input\n                  type=\"checkbox\"\n                  className=\"large-checkbox\"\n                  checked={abled}\n                  onChange={() => this.isCatAble(abled, attr)}\n                  style={{ 'cursor': 'pointer'}}\n              />\n            </td>\n          </tr>\n      );\n    });\n\n    // Iterate numerical attributes\n    const numAttrs = this.props.attributes.slice(3).map(([attr, config], index) => {\n      const abled = this.props.mask[attr];\n      const { low, high } = config;\n      return (\n          <tr key={attr}>\n            <td className=\"align-middle\">\n              <span className={`${this.props.mask[attr] ? \"attribute-select\" : null}`}\n                style={{'textDecoration': this.props.mask[attr] ? '' : 'line-through' }}\n              >{attr}</span>\n            </td>\n            <td>\n              <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder={low}\n                  ref={this.inputs[attr][0]}\n                  disabled={1 - abled}\n              />\n            </td>\n            <td>\n              <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder={high}\n                  ref={this.inputs[attr][1]}\n                  disabled={1 - abled}\n              />\n            </td>\n            <td className=\"align-middle\">\n              <input\n                  type=\"checkbox\"\n                  className=\"large-checkbox\"\n                  checked={abled}\n                  disabled={['sptree'].includes(this.props.mode)}\n                  onChange={() => this.isNumAble(abled, attr)}\n                  style={{ 'cursor': 'pointer'}}\n              />\n            </td>\n          </tr>\n      );\n    });\n\n    // number of tuples & Algorithms\n    const numTuple = [];\n    numTuple.push(\n        <tr key=\"other\">\n          <td className=\"align-middle font-weight-bold\">Maximum No. of Cars</td>\n          <td colSpan=\"20\">\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder='1000'\n                ref={this.inputs.maxPoints}\n                style={{ width: '50%' }}\n            />\n          </td>\n        </tr>\n        );\n\n    const algorithmChoose = [];\n    algorithmChoose.push(\n      <tr>\n      <td className=\"align-middle\" colSpan=\"2\">\n        <div className=\"form-check form-check-inline custom-radio-spacing\">\n          <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"algorithm\"\n              value=\"sptree\"\n              onChange={this.handleChange}\n              id=\"sptreeRadio\"\n              checked={this.state.selectedAlgorithm === 'sptree'}\n          />\n          <label className=\"form-check-label\" htmlFor=\"sptreeRadio\">\n            SP-Tree\n          </label>\n        </div>\n        <div className=\"form-check form-check-inline\">\n          <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"algorithm\"\n              value=\"gegraph\"\n              onChange={this.handleChange}\n              id=\"gegraphRadio\"\n              checked={this.state.selectedAlgorithm === 'gegraph'}\n          />\n          <label className=\"form-check-label\" htmlFor=\"gegraphRadio\">\n            GE-Graph\n          </label>\n        </div>\n      </td>\n    </tr>\n    );\n\n\n    return (\n        <div className=\"text-center m-auto\" style={{ maxWidth: \"100%\" }}>\n          <img alt='' src={MainTitle} style={{ 'width': '100%' }} />\n          <br />\n          <br />\n\n          {/* Algorithm */}\n          <h4 style={{\n            'background': 'linear-gradient(to right, #89bfe9, #5271a6)', // 添加从左到右的颜色渐变\n            'borderRadius': '5px',\n            'textAlign': 'left',\n            'padding': '5px',\n            'boxShadow': '3px 3px 5px rgba(0, 0, 0, 0.5)'  // 添加稍微的阴影效果\n          }}>\n            <strong><em>STEP 1:</em></strong> Select the Algorithms for Recommendation\n          </h4>\n          <table className=\"table\">\n            <tbody>{algorithmChoose}</tbody>\n          </table>\n\n          {/* categorical attributes */}\n          <h4 style={{\n            'background': 'linear-gradient(to right, #89bfe9, #5271a6)', // 添加从左到右的颜色渐变\n            'borderRadius': '5px',\n            'textAlign': 'left',\n            'padding': '5px',\n            'boxShadow': '3px 3px 5px rgba(0, 0, 0, 0.5)'  // 添加稍微的阴影效果\n          }}>\n            <strong><em>STEP 2:</em></strong> Select the Categorical Attributes You Concern\n          </h4>\n          <table className=\"table\">\n            <thead>\n            <tr>\n              <th className=\"align-middle\">Categorical Attributes</th>\n              <th>Values</th>\n              <th>Selection</th>\n            </tr>\n            </thead>\n            <tbody>{catAttrs}</tbody>\n          </table>\n\n          {/* numerical attributes */}\n          <h4 style={{\n            'background': 'linear-gradient(to right, #89bfe9, #5271a6)', // 添加从左到右的颜色渐变\n            'borderRadius': '5px',\n            'textAlign': 'left',\n            'padding': '5px',\n            'boxShadow': '3px 3px 5px rgba(0, 0, 0, 0.5)'  // 添加稍微的阴影效果\n          }}>\n            <strong><em>STEP 3:</em></strong> Select the Numerical Attributes You Concern\n          </h4>\n          <table className=\"table\">\n            <thead>\n            <tr>\n              <th className=\"align-middle\">Numerical Attributes</th>\n              <th>Lower bound</th>\n              <th>Upper bound</th>\n              <th>Selection</th>\n            </tr>\n            </thead>\n            <tbody>{numAttrs}</tbody>\n          </table>\n\n          {/* Number of Tuples */}\n          <h4 style={{\n            'background': 'linear-gradient(to right, #89bfe9, #5271a6)', // 添加从左到右的颜色渐变\n            'borderRadius': '5px',\n            'textAlign': 'left',\n            'padding': '5px',\n            'boxShadow': '3px 3px 5px rgba(0, 0, 0, 0.5)'  // 添加稍微的阴影效果\n          }}>\n            <strong><em>STEP 4:</em></strong> Set the Maximum Number of Candidate Cars\n          </h4>\n          <table className=\"table\">\n            <tbody>{numTuple}</tbody>\n          </table>\n\n\n\n          <div>\n            <button\n                type=\"button\"\n                className=\"modern-btn\"\n                style={{ width: \"8rem\" }}\n                onClick={this.handleStart}\n            >\n              Next\n            </button>\n          </div>\n          <br/>\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ attributes, mask, points, mode }) => ({\n  attributes,\n  mask,\n  points,\n  mode\n});\n\nconst mapDispatchToProps = dispatch => ({\n  startAlgorithmSPTree: candidates => {\n    dispatch(setCandidates(candidates));\n    dispatch(setActiveComponent(\"SPTree\"));\n  },\n  startAlgorithmGEGraph: candidates => {\n    dispatch(setCandidates(candidates));\n    dispatch(setActiveComponent(\"GEGraph\"));\n  },\n  toggleMask: (attr, mask) => dispatch(toggleMask(attr, mask)),\n  changeMode: mode => dispatch(changeMode(mode)),\n  changeK: K => dispatch(changeK(K)),\n  setDataset: (points, mask, attributes) => dispatch(setDataset(points, mask, attributes))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CarWelcome);","import React from \"react\";\nimport {\n  setActiveComponent,\n  setCandidates,\n  toggleMask,\n  changeMode,\n  changeK,\n  setDataset\n} from \"../actions\";\nimport { connect } from \"react-redux\";\nimport {\n  selectCandidates,\n  selectCatonlyCandidates,\n  getRanges,\n  getSkyline,\n  loadCarDataset\n} from \"../utils\";\nimport imgFavorite from '../imgs/favorite.png';\nimport MainTitle from '../imgs/MainTitleBall.png';\nimport SelectCatAttr from '../imgs/SelectCatAttr.png'\nimport '../css/welcome.css';\nimport {config} from \"@fortawesome/fontawesome-svg-core\";\n\n// the welcome scene containing a brief introduction and a table to obtain the user's input\nclass NBAWelcome extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedAlgorithm: \"sptree\",\n      points1: null\n    };\n\n  }\n\n  async componentDidMount() {\n    const points1 = await loadCarDataset(\"./datasets/nba.txt\");\n    const attributes = [\n      [\"Position\"],\n      [\"Style\"],\n      [\"Division\"],\n      [\"Score\", { low: 0, high: 30, smallerBetter: true }],\n      [\"Foul\", { low: 0, high: 6, smallerBetter: false }],\n      [\"Rebound\", { low: 0, high: 15, smallerBetter: false }],\n      [\"Turnover\", { low: 0, high: 10, smallerBetter: true }]\n    ];\n    const mask = {};\n    attributes.slice(0, 3).forEach(([attr]) => {mask[attr] = 1;});\n    attributes.slice(3).forEach(([attr, config]) => {mask[attr] = 0;});\n    this.props.setDataset(points1, mask, attributes);\n    this.props.changeMode(\"sptree\");\n    console.log(this.props.mode);\n    this.setState({ points1 });\n  }\n\n\n  handleStart = () => {\n    let ranges = [], mask = [], maxPoints;\n    for (let i = 0; i < this.props.attributes.length; ++i)\n    {\n        const [attr, config] = this.props.attributes[i];\n        mask.push(this.props.mask[attr]);\n    }\n    for (let i = 0; i < this.props.attributes.slice(3).length; ++i)\n    {\n      const [attr, config] = this.props.attributes.slice(3)[i];\n      const range = [config.low, config.high];\n      if (this.props.mask[attr])\n      {\n        for (let j = 0; j < 2; ++j)\n        {\n          const str = this.inputs[attr][j].current.value.trim();\n          if (str === \"\") continue;\n          else if (isNaN(str))\n          {\n            alert(`${str} in range of ${attr} is not an integer`);\n            return;\n          }\n          else {\n            range[j] = parseFloat(str);\n          }\n        }\n      }\n      ranges.push(range);\n    }\n    const str = this.inputs.maxPoints.current.value.trim();\n    console.log('input number', str);\n    if (str === \"\") maxPoints = 1000;\n    else if (/\\d+/.test(str)) maxPoints = parseInt(str);\n    else {\n      alert(`${str} for Maximum items is not an integer`);\n      return;\n    }\n    if (maxPoints > 40000 || maxPoints < 100)\n      return alert('The input is out of the range, please input a number between 1000 ~ 40000');\n\n    console.log('ranges', ranges);\n    console.log('mask', mask);\n    console.log('maxPoints', maxPoints);\n\n    if(['gegraph'].includes(this.props.mode))\n    {\n      const candidates = selectCandidates(\n          this.props.points,\n          ranges,\n          mask,\n          maxPoints\n      );\n      if (candidates.length === 0) {\n        alert(\"No matching Tuples, try larger ranges\");\n        return;\n      }\n\n      console.log('attr', this.props.attributes);\n      let isSelected = this.props.attributes.map(([attr, config]) => {\n        return this.props.mask[attr];\n      })\n      let smallerBetter = this.props.attributes.slice(3).map(([attr, config]) => {\n        return config.smallerBetter ? 1 : 0;\n      })\n      console.log('input points--', candidates, isSelected, smallerBetter);\n\n      //console.log('input points--', candidates, isSelected, smallerBetter);\n\n      let skyline = getSkyline(candidates, smallerBetter, isSelected)\n      if (skyline.length < 10)\n      {\n        console.log('skyline', skyline);\n        return alert('Too few valid tuples! Try more attributes, looser ranges, larger Max No. of Tuples or larger datasets!')\n      }\n\n      /*\n      if (Object.values(this.props.mask).slice(0, 3).filter((i) => i === 1).length > 2) {\n        return alert('SPTree only supports two categorical attributes!');\n      }\n      */\n\n      console.log('skyline', skyline);\n      this.props.startAlgorithmGEGraph(skyline);\n\n    }\n    else\n    {\n      if (Object.values(this.props.mask).slice(0, 3).filter((i) => i === 1).length < 1) {\n        return alert('You need to select at least one categorical attribute!');\n      }\n      const candidates = selectCatonlyCandidates (this.props.points, mask);\n      this.props.startAlgorithmSPTree(candidates);\n    }\n  };\n\n  handleChange = event => {\n    if (['gegraph'].includes(event.target.value))\n    {\n      if (Object.values(this.props.mask).slice(0, 3).filter((i) => i === 1).length > 2)\n      {\n        alert(event.target.value + ' only supports two categorical attributes!');\n        this.setState({ selectedAlgorithm: 'sptree' });\n        return\n      }\n      this.props.attributes.slice(3).map(([attr, config]) => {\n        this.props.toggleMask(attr, 1);\n      });\n    }\n    else if (['sptree'].includes(event.target.value))\n    {\n      this.props.attributes.slice(3).map(([attr, config]) => {\n        this.props.toggleMask(attr, 0);\n      });\n    }\n\n    this.setState({ selectedAlgorithm: event.target.value });\n    this.props.changeMode(event.target.value);\n\n  };\n\n  isCatAble = (abled, attr) =>\n  {\n    console.log(this.props.mask);\n    if(abled === 1) {\n      if (Object.values(this.props.mask).slice(0, 3).filter((i) => i === 1).length <= 1)\n      {\n        return alert('You need to select at least one categorical attribute!');\n      }\n      else\n        this.props.toggleMask(attr, 1 - this.props.mask[attr]);\n    }\n    else {\n       if (this.props.mode === 'gegraph' && Object.values(this.props.mask).slice(0, 3).filter((i) => i === 1).length >= 2)\n       {\n        return alert('You can only select at most two categorical attributes!');\n       }\n       else\n         this.props.toggleMask(attr, 1 - this.props.mask[attr]);\n    }\n  }\n\n  isNumAble = (abled, attr) =>\n  {\n    console.log(this.props.mask);\n    if(abled === 1) {\n      if (Object.values(this.props.mask).slice(3).filter((i) => i === 1).length <= 3)\n      {\n        return alert('You need to select at least three numerical attributes!');\n      }\n      else\n        this.props.toggleMask(attr, 1 - this.props.mask[attr]);\n    }\n    else\n      this.props.toggleMask(attr, 1 - this.props.mask[attr]);\n  }\n\n  render() {\n    console.log(this.props.mask);\n\n    if (this.state.points1 === null) {\n      return <div>Loading...</div>;\n    }\n\n    // Init inputs\n    this.inputs = {};\n    this.props.attributes.slice(3).forEach(([attr, config]) => {\n      this.inputs[attr] = [React.createRef(), React.createRef()];\n    });\n    this.inputs.maxPoints = React.createRef();\n\n\n    const categoricalValues =[[\"Forward\", \"Center\", \"Guard\"],\n      [\"Slasher\", \"Players\", \"Facilitator\", \"Defender\"], [\"West\", \"East\"]];\n    // Iterate categorical attributes\n    const catAttrs = this.props.attributes.slice(0, 3).map((attr, index) => {\n      const abled = this.props.mask[attr];\n      return (\n          <tr key={attr}>\n            <td className=\"align-middle\">\n              <span className={`${this.props.mask[attr] ? \"attribute-select\" : null}`}\n                    style={{'textDecoration': this.props.mask[attr] ? '' : 'line-through' }}\n              >{attr}</span>\n            </td>\n            <td>\n              <span style={{'textDecoration': this.props.mask[attr] ? '' : 'line-through' }}\n              >{categoricalValues[index].join(', ')}</span>\n            </td>\n            <td className=\"align-middle\">\n              <input\n                  type=\"checkbox\"\n                  className=\"large-checkbox\"\n                  checked={abled}\n                  onChange={() => this.isCatAble(abled, attr)}\n                  style={{ 'cursor': 'pointer'}}\n              />\n            </td>\n          </tr>\n      );\n    });\n\n    // Iterate numerical attributes\n    const numAttrs = this.props.attributes.slice(3).map(([attr, config], index) => {\n      const abled = this.props.mask[attr];\n      const { low, high } = config;\n      return (\n          <tr key={attr}>\n            <td className=\"align-middle\">\n              <span className={`${this.props.mask[attr] ? \"attribute-select\" : null}`}\n                style={{'textDecoration': this.props.mask[attr] ? '' : 'line-through' }}\n              >{attr}</span>\n            </td>\n            <td>\n              <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder={low}\n                  ref={this.inputs[attr][0]}\n                  disabled={1 - abled}\n              />\n            </td>\n            <td>\n              <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder={high}\n                  ref={this.inputs[attr][1]}\n                  disabled={1 - abled}\n              />\n            </td>\n            <td className=\"align-middle\">\n              <input\n                  type=\"checkbox\"\n                  className=\"large-checkbox\"\n                  checked={abled}\n                  disabled={['sptree'].includes(this.props.mode)}\n                  onChange={() => this.isNumAble(abled, attr)}\n                  style={{ 'cursor': 'pointer'}}\n              />\n            </td>\n          </tr>\n      );\n    });\n\n    // number of tuples & Algorithms\n    const numTuple = [];\n    numTuple.push(\n        <tr key=\"other\">\n          <td className=\"align-middle font-weight-bold\">Maximum No. of Players</td>\n          <td colSpan=\"20\">\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder='1000'\n                ref={this.inputs.maxPoints}\n                style={{ width: '50%' }}\n            />\n          </td>\n        </tr>\n        );\n\n    const algorithmChoose = [];\n    algorithmChoose.push(\n      <tr>\n      <td className=\"align-middle\" colSpan=\"2\">\n        <div className=\"form-check form-check-inline custom-radio-spacing\">\n          <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"algorithm\"\n              value=\"sptree\"\n              onChange={this.handleChange}\n              id=\"sptreeRadio\"\n              checked={this.state.selectedAlgorithm === 'sptree'}\n          />\n          <label className=\"form-check-label\" htmlFor=\"sptreeRadio\">\n            SP-Tree\n          </label>\n        </div>\n        <div className=\"form-check form-check-inline\">\n          <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"algorithm\"\n              value=\"gegraph\"\n              onChange={this.handleChange}\n              id=\"gegraphRadio\"\n              checked={this.state.selectedAlgorithm === 'gegraph'}\n          />\n          <label className=\"form-check-label\" htmlFor=\"gegraphRadio\">\n            GE-Graph\n          </label>\n        </div>\n      </td>\n    </tr>\n    );\n\n\n    return (\n        <div className=\"text-center m-auto\" style={{ maxWidth: \"100%\" }}>\n          <img alt='' src={MainTitle} style={{ 'width': '100%' }} />\n          <br />\n          <br />\n\n          {/* Algorithm */}\n          <h4 style={{\n            'background': 'linear-gradient(to right, #89bfe9, #5271a6)', // 添加从左到右的颜色渐变\n            'borderRadius': '5px',\n            'textAlign': 'left',\n            'padding': '5px',\n            'boxShadow': '3px 3px 5px rgba(0, 0, 0, 0.5)'  // 添加稍微的阴影效果\n          }}>\n            <strong><em>STEP 1:</em></strong> Select the Algorithms for Recommendation\n          </h4>\n          <table className=\"table\">\n            <tbody>{algorithmChoose}</tbody>\n          </table>\n\n          {/* categorical attributes */}\n          <h4 style={{\n            'background': 'linear-gradient(to right, #89bfe9, #5271a6)', // 添加从左到右的颜色渐变\n            'borderRadius': '5px',\n            'textAlign': 'left',\n            'padding': '5px',\n            'boxShadow': '3px 3px 5px rgba(0, 0, 0, 0.5)'  // 添加稍微的阴影效果\n          }}>\n            <strong><em>STEP 2:</em></strong> Select the Categorical Attributes You Concern\n          </h4>\n          <table className=\"table\">\n            <thead>\n            <tr>\n              <th className=\"align-middle\">Categorical Attributes</th>\n              <th>Values</th>\n              <th>Selection</th>\n            </tr>\n            </thead>\n            <tbody>{catAttrs}</tbody>\n          </table>\n\n          {/* numerical attributes */}\n          <h4 style={{\n            'background': 'linear-gradient(to right, #89bfe9, #5271a6)', // 添加从左到右的颜色渐变\n            'borderRadius': '5px',\n            'textAlign': 'left',\n            'padding': '5px',\n            'boxShadow': '3px 3px 5px rgba(0, 0, 0, 0.5)'  // 添加稍微的阴影效果\n          }}>\n            <strong><em>STEP 3:</em></strong> Select the Numerical Attributes You Concern\n          </h4>\n          <table className=\"table\">\n            <thead>\n            <tr>\n              <th className=\"align-middle\">Numerical Attributes</th>\n              <th>Lower bound</th>\n              <th>Upper bound</th>\n              <th>Selection</th>\n            </tr>\n            </thead>\n            <tbody>{numAttrs}</tbody>\n          </table>\n\n          {/* Number of Tuples */}\n          <h4 style={{\n            'background': 'linear-gradient(to right, #89bfe9, #5271a6)', // 添加从左到右的颜色渐变\n            'borderRadius': '5px',\n            'textAlign': 'left',\n            'padding': '5px',\n            'boxShadow': '3px 3px 5px rgba(0, 0, 0, 0.5)'  // 添加稍微的阴影效果\n          }}>\n            <strong><em>STEP 4:</em></strong> Set the Maximum Number of Candidate Players\n          </h4>\n          <table className=\"table\">\n            <tbody>{numTuple}</tbody>\n          </table>\n\n\n\n          <div>\n            <button\n                type=\"button\"\n                className=\"modern-btn\"\n                style={{ width: \"8rem\" }}\n                onClick={this.handleStart}\n            >\n              Next\n            </button>\n          </div>\n          <br/>\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ attributes, mask, points, mode }) => ({\n  attributes,\n  mask,\n  points,\n  mode\n});\n\nconst mapDispatchToProps = dispatch => ({\n  startAlgorithmSPTree: candidates => {\n    dispatch(setCandidates(candidates));\n    dispatch(setActiveComponent(\"SPTree\"));\n  },\n  startAlgorithmGEGraph: candidates => {\n    dispatch(setCandidates(candidates));\n    dispatch(setActiveComponent(\"GEGraph\"));\n  },\n  toggleMask: (attr, mask) => dispatch(toggleMask(attr, mask)),\n  changeMode: mode => dispatch(changeMode(mode)),\n  changeK: K => dispatch(changeK(K)),\n  setDataset: (points, mask, attributes) => dispatch(setDataset(points, mask, attributes))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(NBAWelcome);","import React from \"react\";\r\nimport Welcome from \"./Welcome\";\r\nimport AlgSelction from \"./AlgSelection\";\r\nimport Introduction from \"./Introduction\";\r\nimport PhaseOne from \"./PhaseOne\";\r\nimport Interaction from \"./Interaction\";\r\nimport PhaseTwo from \"./PhaseTwo\";\r\nimport Result from \"./Result\";\r\nimport SPTree from \"./SPTree\"\r\nimport GEGraph from \"./GEGraph\"\r\nimport End from \"./End\"\r\nimport ResultGEGraph from \"./ResultGraph\"\r\nimport CarWelcome from \"./CarWelcome\";\r\nimport NBAWelcome from \"./NBAWelcome\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction App({ activeComponent }) {\r\n  switch (activeComponent) {\r\n    case \"Welcome\":\r\n      return <Welcome />;\r\n    case \"CarWelcome\":\r\n      return <CarWelcome />;\r\n    case \"NBAWelcome\":\r\n      return <NBAWelcome />;\r\n    case \"AlgSelection\":\r\n      return <AlgSelction />;\r\n    case \"SPTree\":\r\n      return <SPTree />;\r\n    case \"GEGraph\":\r\n      return <GEGraph />;\r\n    case \"Introduction\":\r\n      return <Introduction />\r\n    case \"ResultGraph\":\r\n      return <ResultGEGraph />;\r\n    case \"PhaseTwo\":\r\n      return <PhaseTwo />\r\n    case \"Result\":\r\n      return <Result />;\r\n    case \"End\":\r\n      return <End />;\r\n    default:\r\n      return <div />;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ activeComponent }) => ({\r\n  activeComponent\r\n});\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\nimport React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./components/App\";\r\nimport { loadCarDataset } from \"./utils\";\r\n\r\nwindow.Module = {\r\n  onRuntimeInitialized: async function() {\r\n\r\n    const store = createStore(\r\n      rootReducer\r\n      // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    );\r\n\r\n    render(\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>,\r\n      document.getElementById(\"root\")\r\n    );\r\n  }\r\n};\r\n\r\n//////动态创建了一个 <script> 标签，并将其添加到文档的 <body> 元素中，用于异步加载一个名为 \"run.js\" 的 JavaScript 文件。这样可以在页面加载时并行地加载 JavaScript 代码，从而提高页面的性能和响应速度。\r\nconst script = document.createElement(\"script\");\r\nscript.src = \"run.js\";\r\nscript.async = true;\r\ndocument.body.appendChild(script);\r\n","module.exports = __webpack_public_path__ + \"static/media/favorite.39847071.png\";","module.exports = __webpack_public_path__ + \"static/media/SelectCatAttr.9d9e8f43.png\";","module.exports = __webpack_public_path__ + \"static/media/MainTitleAll.40deea18.png\";","module.exports = __webpack_public_path__ + \"static/media/TitleTree.9f1e9ded.png\";","module.exports = __webpack_public_path__ + \"static/media/TitleGraph.46bc3ca8.png\";","module.exports = __webpack_public_path__ + \"static/media/MainTitle.41f0125d.png\";","module.exports = __webpack_public_path__ + \"static/media/MainTitleBall.e11ecd04.png\";"],"sourceRoot":""}